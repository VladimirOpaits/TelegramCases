"""
User management module for Telegram Casino API

This module provides UserManager class for:
- User CRUD operations
- Balance management (fantics)
- Atomic transactions for balance operations
"""

from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime
from typing import Optional, List, Tuple
from .models import User
from .manager import DatabaseManager


class UserManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –∏—Ö –±–∞–ª–∞–Ω—Å–∞–º–∏"""
    
    def __init__(self, db_manager: DatabaseManager):
        self.db_manager = db_manager
        self.async_session = db_manager.async_session

    # ========== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ==========
    
    async def add_user(self, user_id: int, username: Optional[str] = None) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with self.async_session() as session:
                stmt = select(User).where(User.user_id == user_id)
                result = await session.execute(stmt)
                existing_user = result.scalar_one_or_none()

                if existing_user:
                    if username and existing_user.username != username:
                        existing_user.username = username
                        await session.commit()
                        print(f"üîÑ Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {username}")
                    return True

                new_user = User(
                    user_id=user_id,
                    username=username,
                    registration_date=datetime.now()
                )

                session.add(new_user)
                await session.commit()
                print(f"‚ûï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É")
                return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}")
            return False

    async def get_user(self, user_id: int) -> Optional[User]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with self.async_session() as session:
                stmt = select(User).where(User.user_id == user_id)
                result = await session.execute(stmt)
                return result.scalar_one_or_none()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î: {e}")
            return None

    async def get_all_users(self) -> List[User]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with self.async_session() as session:
                stmt = select(User)
                result = await session.execute(stmt)
                return list(result.scalars().all())
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î: {e}")
            return []

    async def update_user_username(self, user_id: int, new_username: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with self.async_session() as session:
                stmt = select(User).where(User.user_id == user_id)
                result = await session.execute(stmt)
                user = result.scalar_one_or_none()

                if user:
                    user.username = new_username
                    await session.commit()
                    print(f"üîÑ Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
                    return True
                else:
                    print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False

    async def delete_user(self, user_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with self.async_session() as session:
                stmt = select(User).where(User.user_id == user_id)
                result = await session.execute(stmt)
                user = result.scalar_one_or_none()

                if user:
                    await session.delete(user)
                    await session.commit()
                    print(f"üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã")
                    return True
                else:
                    print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False

    async def get_users_count(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            async with self.async_session() as session:
                stmt = select(func.count(User.id))
                result = await session.execute(stmt)
                return result.scalar() or 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return 0

    # ========== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –§–ê–ù–¢–ò–ö–ê–ú–ò ==========

    async def get_fantics(self, user_id: int) -> Optional[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with self.async_session() as session:
                stmt = select(User.fantics).where(User.user_id == user_id)
                result = await session.execute(stmt)
                fantics = result.scalar_one_or_none()
                return fantics if fantics is not None else 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–Ω—Ç–∏–∫–æ–≤: {e}")
            return None

    async def add_fantics(self, user_id: int, amount: int) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–Ω—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            async with self.async_session() as session:
                stmt = select(User).where(User.user_id == user_id)
                result = await session.execute(stmt)
                user = result.scalar_one_or_none()

                if user:
                    user.fantics += amount
                    await session.commit()
                    print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (–∏—Ç–æ–≥–æ: {user.fantics})")
                    return True
                else:
                    print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–Ω—Ç–∏–∫–æ–≤: {e}")
            return False

    async def subtract_fantics(self, user_id: int, amount: int) -> bool:
        """–°–ø–∏—Å–∞—Ç—å —Ñ–∞–Ω—Ç–∏–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with self.async_session() as session:
                stmt = select(User).where(User.user_id == user_id)
                result = await session.execute(stmt)
                user = result.scalar_one_or_none()

                if user and user.fantics >= amount:
                    user.fantics -= amount
                    await session.commit()
                    print(f"‚ûñ –°–ø–∏—Å–∞–Ω–æ {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–æ—Å—Ç–∞–ª–æ—Å—å: {user.fantics})")
                    return True
                else:
                    if user:
                        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–Ω—Ç–∏–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: –µ—Å—Ç—å {user.fantics}, –Ω—É–∂–Ω–æ {amount}")
                    else:
                        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Ñ–∞–Ω—Ç–∏–∫–æ–≤: {e}")
            return False

    async def set_fantics(self, user_id: int, amount: int) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            async with self.async_session() as session:
                stmt = select(User).where(User.user_id == user_id)
                result = await session.execute(stmt)
                user = result.scalar_one_or_none()

                if user:
                    user.fantics = max(0, amount)  # –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    await session.commit()
                    print(f"üîÑ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    return True
                else:
                    print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ñ–∞–Ω—Ç–∏–∫–æ–≤: {e}")
            return False

    # ========== –ê–¢–û–ú–ê–†–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò –î–õ–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ==========

    async def atomic_case_transaction(self, user_id: int, case_cost: int, prize_amount: int) -> Tuple[bool, str, int]:
        """
        –ê—Ç–æ–º–∞—Ä–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞:
        1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å
        3. –°–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–µ–π—Å–∞
        4. –î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã–∏–≥—Ä—ã—à
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ–≤—ã–π_–±–∞–ª–∞–Ω—Å)
        """
        try:
            async with self.async_session() as session:
                # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                stmt = select(User).where(User.user_id == user_id).with_for_update()
                result = await session.execute(stmt)
                user = result.scalar_one_or_none()

                if not user:
                    return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ", 0

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
                if user.fantics < case_cost:
                    return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–Ω—Ç–∏–∫–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è: {case_cost}, –¥–æ—Å—Ç—É–ø–Ω–æ: {user.fantics}", user.fantics

                # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–æ–º–∞—Ä–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
                old_balance = user.fantics
                user.fantics = user.fantics - case_cost + prize_amount
                new_balance = user.fantics

                # –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                await session.commit()
                
                print(f"üíé –ê—Ç–æ–º–∞—Ä–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∫–µ–π—Å–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –±–∞–ª–∞–Ω—Å {old_balance} -> {new_balance}")
                return True, f"–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç! –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {case_cost}, –≤—ã–∏–≥—Ä–∞–Ω–æ: {prize_amount}", new_balance

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Ç–æ–º–∞—Ä–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–µ–π—Å–∞: {e}")
            return False, f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}", 0

    async def atomic_subtract_fantics(self, user_id: int, amount: int) -> Tuple[bool, str, int]:
        """
        –ê—Ç–æ–º–∞—Ä–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–Ω—Ç–∏–∫–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ–≤—ã–π_–±–∞–ª–∞–Ω—Å)
        """
        try:
            async with self.async_session() as session:
                # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                stmt = select(User).where(User.user_id == user_id).with_for_update()
                result = await session.execute(stmt)
                user = result.scalar_one_or_none()

                if not user:
                    return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", 0

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
                if user.fantics < amount:
                    return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–Ω—Ç–∏–∫–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è: {amount}, –¥–æ—Å—Ç—É–ø–Ω–æ: {user.fantics}", user.fantics

                # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
                old_balance = user.fantics
                user.fantics -= amount
                new_balance = user.fantics

                await session.commit()
                
                print(f"‚ûñ –ê—Ç–æ–º–∞—Ä–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, {old_balance} -> {new_balance}")
                return True, f"–°–ø–∏—Å–∞–Ω–æ {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤", new_balance

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Ç–æ–º–∞—Ä–Ω–æ–º —Å–ø–∏—Å–∞–Ω–∏–∏: {e}")
            return False, f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}", 0

    async def atomic_add_fantics(self, user_id: int, amount: int) -> Tuple[bool, str, int]:
        """
        –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–Ω—Ç–∏–∫–æ–≤
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ–≤—ã–π_–±–∞–ª–∞–Ω—Å)
        """
        try:
            async with self.async_session() as session:
                # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                stmt = select(User).where(User.user_id == user_id).with_for_update()
                result = await session.execute(stmt)
                user = result.scalar_one_or_none()

                if not user:
                    return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ", 0

                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
                old_balance = user.fantics
                user.fantics += amount
                new_balance = user.fantics

                await session.commit()
                
                print(f"‚ûï –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, {old_balance} -> {new_balance}")
                return True, f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤", new_balance

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Ç–æ–º–∞—Ä–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")
            return False, f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {str(e)}", 0 
"""
Payment management module for Telegram Casino API

This module provides PaymentManager class for:
- Pending payment management
- Successful payment recording
- Payment statistics and verification
"""

from sqlalchemy import select, func
from datetime import datetime, timedelta
from typing import Optional, List
from .models import PendingPayment, SuccessfulPayment
from .manager import DatabaseManager


class PaymentManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏"""
    
    def __init__(self, db_manager: DatabaseManager):
        self.db_manager = db_manager
        self.async_session = db_manager.async_session

    # ========== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° PENDING –ü–õ–ê–¢–ï–ñ–ê–ú–ò ==========
    
    async def create_pending_payment(
        self, 
        payment_id: str,
        user_id: int,
        amount_fantics: int,
        amount_ton: float,
        payment_method: str,
        destination_address: str,
        comment: str,
        expires_in_minutes: int = 30
    ) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ pending –ø–ª–∞—Ç–µ–∂–µ"""
        try:
            async with self.async_session() as session:
                expires_at = datetime.now() + timedelta(minutes=expires_in_minutes)
                
                payment = PendingPayment(
                    payment_id=payment_id,
                    user_id=user_id,
                    amount_fantics=amount_fantics,
                    amount_ton=amount_ton,
                    payment_method=payment_method,
                    status='pending',
                    destination_address=destination_address,
                    comment=comment,
                    expires_at=expires_at
                )
                
                session.add(payment)
                await session.commit()
                
                print(f"üí∞ –°–æ–∑–¥–∞–Ω pending –ø–ª–∞—Ç–µ–∂ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {amount_fantics} —Ñ–∞–Ω—Ç–∏–∫–æ–≤")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è pending –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False
    
    async def get_pending_payment(self, payment_id: str) -> Optional[PendingPayment]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ pending –ø–ª–∞—Ç–µ–∂–∞ –ø–æ ID"""
        try:
            async with self.async_session() as session:
                stmt = select(PendingPayment).where(PendingPayment.payment_id == payment_id)
                result = await session.execute(stmt)
                return result.scalar_one_or_none()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pending –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return None
    
    async def update_payment_status(
        self, 
        payment_id: str, 
        status: str, 
        transaction_hash: Optional[str] = None
    ) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            async with self.async_session() as session:
                stmt = select(PendingPayment).where(PendingPayment.payment_id == payment_id)
                result = await session.execute(stmt)
                payment = result.scalar_one_or_none()
                
                if not payment:
                    print(f"‚ùå Pending –ø–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
                
                payment.status = status
                if transaction_hash:
                    payment.transaction_hash = transaction_hash
                if status == 'confirmed':
                    payment.confirmed_at = datetime.now()
                
                await session.commit()
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{status}'")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False
    
    async def get_pending_payments_for_verification(self, limit: int = 50) -> List[PendingPayment]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ pending –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        try:
            async with self.async_session() as session:
                stmt = select(PendingPayment).where(
                    PendingPayment.status == 'pending',
                    PendingPayment.expires_at > datetime.now()
                ).limit(limit)
                result = await session.execute(stmt)
                return result.scalars().all()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pending –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            return []
    
    async def expire_old_payments(self) -> int:
        """–ü–æ–º–µ—á–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –∫–∞–∫ expired"""
        try:
            async with self.async_session() as session:
                stmt = select(PendingPayment).where(
                    PendingPayment.status == 'pending',
                    PendingPayment.expires_at <= datetime.now()
                )
                result = await session.execute(stmt)
                expired_payments = result.scalars().all()
                
                count = 0
                for payment in expired_payments:
                    payment.status = 'expired'
                    count += 1
                
                await session.commit()
                if count > 0:
                    print(f"‚è∞ –ü–æ–º–µ—á–µ–Ω–æ {count} –ø–ª–∞—Ç–µ–∂–µ–π –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–µ")
                return count
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            return 0

    # ========== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –£–°–ü–ï–®–ù–´–ú–ò –ü–õ–ê–¢–ï–ñ–ê–ú–ò ==========
    
    async def add_successful_payment(
        self,
        user_id: int,
        payment_method: str,
        amount_fantics: int,
        amount_paid: float,
        sender_wallet: Optional[str] = None,
        transaction_hash: Optional[str] = None,
        payment_id: Optional[str] = None
    ) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with self.async_session() as session:
                payment = SuccessfulPayment(
                    user_id=user_id,
                    payment_method=payment_method,
                    amount_fantics=amount_fantics,
                    amount_paid=amount_paid,
                    sender_wallet=sender_wallet,
                    transaction_hash=transaction_hash,
                    payment_id=payment_id
                )
                
                session.add(payment)
                await session.commit()
                
                print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∑–∞–ø–∏—Å–∞–Ω: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –º–µ—Ç–æ–¥ {payment_method}, {amount_fantics} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –∑–∞ {amount_paid}")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False
    
    async def get_user_successful_payments(
        self, 
        user_id: int, 
        limit: int = 50
    ) -> List[SuccessfulPayment]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with self.async_session() as session:
                stmt = select(SuccessfulPayment).where(
                    SuccessfulPayment.user_id == user_id
                ).order_by(SuccessfulPayment.created_at.desc()).limit(limit)
                
                result = await session.execute(stmt)
                return result.scalars().all()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            return []
    
    async def get_all_successful_payments(
        self, 
        limit: int = 100
    ) -> List[SuccessfulPayment]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        try:
            async with self.async_session() as session:
                stmt = select(SuccessfulPayment).order_by(
                    SuccessfulPayment.created_at.desc()
                ).limit(limit)
                
                result = await session.execute(stmt)
                return result.scalars().all()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            return []
    
    async def get_payment_statistics(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
        try:
            async with self.async_session() as session:
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                total_payments = await session.scalar(
                    select(func.count(SuccessfulPayment.id))
                )
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç–æ–¥–∞–º –æ–ø–ª–∞—Ç—ã
                ton_payments = await session.scalar(
                    select(func.count(SuccessfulPayment.id)).where(
                        SuccessfulPayment.payment_method == 'ton'
                    )
                )
                
                stars_payments = await session.scalar(
                    select(func.count(SuccessfulPayment.id)).where(
                        SuccessfulPayment.payment_method == 'stars'
                    )
                )
                
                # –û–±—â–∞—è —Å—É–º–º–∞ —Ñ–∞–Ω—Ç–∏–∫–æ–≤
                total_fantics = await session.scalar(
                    select(func.sum(SuccessfulPayment.amount_fantics))
                ) or 0
                
                # –û–±—â–∞—è —Å—É–º–º–∞ –≤ TON
                total_ton = await session.scalar(
                    select(func.sum(SuccessfulPayment.amount_paid)).where(
                        SuccessfulPayment.payment_method == 'ton'
                    )
                ) or 0
                
                return {
                    "total_payments": total_payments,
                    "ton_payments": ton_payments,
                    "stars_payments": stars_payments,
                    "total_fantics": total_fantics,
                    "total_ton": total_ton
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            return {
                "total_payments": 0,
                "ton_payments": 0,
                "stars_payments": 0,
                "total_fantics": 0,
                "total_ton": 0
            }

    async def get_pending_payment_by_user(self, user_id: int, limit: int = 10) -> List[PendingPayment]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ pending –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with self.async_session() as session:
                stmt = select(PendingPayment).where(
                    PendingPayment.user_id == user_id
                ).order_by(PendingPayment.created_at.desc()).limit(limit)
                
                result = await session.execute(stmt)
                return result.scalars().all()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pending –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return []

    async def get_payment_by_transaction_hash(self, transaction_hash: str) -> Optional[PendingPayment]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ —Ö—ç—à—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            async with self.async_session() as session:
                stmt = select(PendingPayment).where(
                    PendingPayment.transaction_hash == transaction_hash
                )
                result = await session.execute(stmt)
                return result.scalar_one_or_none()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ø–æ —Ö—ç—à—É: {e}")
            return None 
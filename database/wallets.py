"""
TON wallet management module for Telegram Casino API

This module provides WalletManager class for:
- TON wallet CRUD operations
- Wallet activation/deactivation
- Wallet verification and management
"""

from sqlalchemy import select
from typing import Optional, List
from .models import TonWallet, User
from .manager import DatabaseManager


class WalletManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å TON –∫–æ—à–µ–ª—å–∫–∞–º–∏"""
    
    def __init__(self, db_manager: DatabaseManager):
        self.db_manager = db_manager
        self.async_session = db_manager.async_session

    async def add_ton_wallet(
        self, 
        user_id: int, 
        wallet_address: str, 
        network: Optional[str] = None, 
        public_key: Optional[str] = None, 
        retry_count: int = 0
    ) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ TON –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        :param wallet_address: –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ —Å–µ—Ç–∏ TON
        :param network: –°–µ—Ç—å –∫–æ—à–µ–ª—å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "-239")
        :param public_key: –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∫–æ—à–µ–ª—å–∫–∞ –≤ hex —Ñ–æ—Ä–º–∞—Ç–µ
        :param retry_count: –°—á–µ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–∏)
        :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            async with self.async_session() as session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_stmt = select(User).where(User.user_id == user_id)
                user_result = await session.execute(user_stmt)
                user = user_result.scalar_one_or_none()
                
                if not user:
                    print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∫–æ—à–µ–ª–µ–∫
                wallet_stmt = select(TonWallet).where(
                    (TonWallet.wallet_address == wallet_address)
                )
                wallet_result = await session.execute(wallet_stmt)
                existing_wallet = wallet_result.scalar_one_or_none()
                
                if existing_wallet:
                    print(f"‚ö†Ô∏è –ö–æ—à–µ–ª–µ–∫ {wallet_address} —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {existing_wallet.user_id}")
                    return False
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫
                new_wallet = TonWallet(
                    user_id=user_id,
                    wallet_address=wallet_address,
                    network=network,
                    public_key=public_key
                )
                
                session.add(new_wallet)
                await session.commit()
                print(f"‚ûï –ö–æ—à–µ–ª–µ–∫ {wallet_address} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ TON –∫–æ—à–µ–ª—å–∫–∞: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π –∫—ç—à–∞ –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
            if ("InvalidCachedStatementError" in str(e) or "cached statement plan is invalid" in str(e)) and retry_count < 1:
                print("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∫—ç—à–∞ SQLAlchemy, –æ—á–∏—â–∞–µ–º –∫—ç—à...")
                try:
                    await self.db_manager.clear_cache_and_reconnect()
                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
                    return await self.add_ton_wallet(user_id, wallet_address, network, public_key, retry_count + 1)
                except Exception as retry_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ: {retry_error}")
                    return False
            
            return False

    async def get_user_ton_wallets(self, user_id: int) -> List[TonWallet]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö TON –∫–æ—à–µ–ª—å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        :return: –°–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        """
        try:
            async with self.async_session() as session:
                stmt = select(TonWallet).where(
                    (TonWallet.user_id == user_id) &
                    (TonWallet.is_active == True)
                )
                result = await session.execute(stmt)
                return list(result.scalars().all())
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ TON –∫–æ—à–µ–ª—å–∫–æ–≤: {e}")
            return []

    async def get_ton_wallet_by_address(self, wallet_address: str, retry_count: int = 0) -> Optional[TonWallet]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É
        :param wallet_address: –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ —Å–µ—Ç–∏ TON
        :param retry_count: –°—á–µ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–∏)
        :return: –û–±—ä–µ–∫—Ç TonWallet –∏–ª–∏ None
        """
        try:
            async with self.async_session() as session:
                stmt = select(TonWallet).where(
                    (TonWallet.wallet_address == wallet_address)
                )
                result = await session.execute(stmt)
                return result.scalar_one_or_none()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ TON –∫–æ—à–µ–ª—å–∫–∞: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π –∫—ç—à–∞ –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
            if ("InvalidCachedStatementError" in str(e) or "cached statement plan is invalid" in str(e)) and retry_count < 1:
                print("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∫—ç—à–∞ SQLAlchemy, –æ—á–∏—â–∞–µ–º –∫—ç—à...")
                try:
                    await self.db_manager.clear_cache_and_reconnect()
                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
                    return await self.get_ton_wallet_by_address(wallet_address, retry_count + 1)
                except Exception as retry_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ: {retry_error}")
                    return None
            
            return None

    async def deactivate_ton_wallet(self, wallet_address: str) -> bool:
        """
        –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è TON –∫–æ—à–µ–ª—å–∫–∞ (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
        :param wallet_address: –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ —Å–µ—Ç–∏ TON
        :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            async with self.async_session() as session:
                stmt = select(TonWallet).where(
                    (TonWallet.wallet_address == wallet_address)
                )
                result = await session.execute(stmt)
                wallet = result.scalar_one_or_none()
                
                if wallet:
                    wallet.is_active = False
                    await session.commit()
                    print(f"‚ûñ –ö–æ—à–µ–ª–µ–∫ {wallet_address} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    return True
                else:
                    print(f"‚ùå –ö–æ—à–µ–ª–µ–∫ {wallet_address} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ TON –∫–æ—à–µ–ª—å–∫–∞: {e}")
            return False

    async def reactivate_ton_wallet(self, wallet_address: str) -> bool:
        """
        –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è TON –∫–æ—à–µ–ª—å–∫–∞
        :param wallet_address: –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ —Å–µ—Ç–∏ TON
        :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            async with self.async_session() as session:
                stmt = select(TonWallet).where(
                    (TonWallet.wallet_address == wallet_address)
                )
                result = await session.execute(stmt)
                wallet = result.scalar_one_or_none()
                
                if wallet:
                    wallet.is_active = True
                    await session.commit()
                    print(f"üîÑ –ö–æ—à–µ–ª–µ–∫ {wallet_address} —Ä–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    return True
                else:
                    print(f"‚ùå –ö–æ—à–µ–ª–µ–∫ {wallet_address} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ TON –∫–æ—à–µ–ª—å–∫–∞: {e}")
            return False

    async def get_wallet_owner(self, wallet_address: str) -> Optional[int]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ—à–µ–ª—å–∫–∞
        :param wallet_address: –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ —Å–µ—Ç–∏ TON
        :return: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None
        """
        try:
            async with self.async_session() as session:
                stmt = select(TonWallet.user_id).where(
                    (TonWallet.wallet_address == wallet_address) &
                    (TonWallet.is_active == True)
                )
                result = await session.execute(stmt)
                return result.scalar_one_or_none()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ—à–µ–ª—å–∫–∞: {e}")
            return None

    async def is_wallet_active(self, wallet_address: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ—à–µ–ª—å–∫–∞
        :param wallet_address: –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ —Å–µ—Ç–∏ TON
        :return: True –µ—Å–ª–∏ –∫–æ—à–µ–ª–µ–∫ –∞–∫—Ç–∏–≤–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            async with self.async_session() as session:
                stmt = select(TonWallet.is_active).where(
                    TonWallet.wallet_address == wallet_address
                )
                result = await session.execute(stmt)
                is_active = result.scalar_one_or_none()
                return is_active is True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ—à–µ–ª—å–∫–∞: {e}")
            return False 
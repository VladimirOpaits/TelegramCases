import logging
from typing import Optional, Dict, Any
from faststream.rabbit.fastapi import RabbitRouter
from config import RABBITMQ_URL

class RabbitManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RabbitMQ"""
    
    def __init__(self):
        self.router: Optional[RabbitRouter] = None
        self.is_available: bool = False
        self.is_connected: bool = False
        
    def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ"""
        try:
            if not RABBITMQ_URL:
                logging.info("üìù RabbitMQ –æ—Ç–∫–ª—é—á–µ–Ω (–Ω–µ—Ç URL –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)")
                return False
                
            print("üê∞ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ:", RABBITMQ_URL.split('@')[1] if '@' in RABBITMQ_URL else RABBITMQ_URL)
            
            self.router = RabbitRouter(RABBITMQ_URL)
            self.is_available = True
            print("‚úÖ RabbitMQ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except ImportError:
            print("‚ö†Ô∏è FastStream –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, RabbitMQ –æ—Ç–∫–ª—é—á–µ–Ω")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RabbitMQ: {e}")
            return False
    
    async def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—Ä–æ–∫–µ—Ä—É"""
        if not self.is_available or not self.router:
            return False
            
        try:
            await self.router.broker.connect()
            self.is_connected = True
            print("üê∞ RabbitMQ –±—Ä–æ–∫–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ –±—Ä–æ–∫–µ—Ä—É: {e}")
            return False
    
    async def disconnect(self) -> None:
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±—Ä–æ–∫–µ—Ä–∞"""
        if self.is_connected and self.router:
            try:
                await self.router.broker.close()
                self.is_connected = False
                print("üê∞ RabbitMQ –±—Ä–æ–∫–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç RabbitMQ: {e}")
    
    async def send_stars_payment_request(self, user_id: int, amount: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞"""
        if not self.is_connected or not self.router:
            print("‚ö†Ô∏è RabbitMQ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–µ–∑–¥–æ—á–∫–∏")
            return False
            
        try:
            message = {
                "user_id": user_id,
                "amount": amount,
                "action": "request_stars_payment",
                "payment_method": "telegram_stars",
                "reason": f"fantics_topup_stars_{amount}"
            }
            
            await self.router.broker.publish(
                message,
                queue="telegram_payments"
            )
            
            print(f"üåü –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, —Å—É–º–º–∞ {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–≤–µ–∑–¥–æ—á–∫–∏: {e}")
            return False
    
    async def send_fantics_transaction(self, user_id: int, amount: int, action: str, reason: str, **kwargs) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Ñ–∞–Ω—Ç–∏–∫–∞–º–∏"""
        if not self.is_connected or not self.router:
            print("‚ö†Ô∏è RabbitMQ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
            return False
            
        try:
            message = {
                "user_id": user_id,
                "amount": amount,
                "action": action,
                "reason": reason,
                **kwargs
            }
            
            await self.router.broker.publish(
                message,
                queue="transactions"
            )
            
            print(f"üê∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {action} {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            return False
    
    async def send_case_notification(self, user_id: int, case_id: int, case_cost: int, prize_amount: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞"""
        if not self.is_connected or not self.router:
            return False
            
        try:
            message = {
                "user_id": user_id,
                "amount": case_cost,
                "action": "case_opened",
                "case_id": case_id,
                "prize": prize_amount,
                "reason": f"case_opened_{case_id}_prize_{prize_amount}"
            }
            
            await self.router.broker.publish(
                message,
                queue="transactions"
            )
            
            print(f"üé∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–µ–π—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ RabbitMQ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ RabbitMQ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ): {e}")
            return False
    
    def get_router(self) -> Optional[RabbitRouter]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ FastAPI"""
        return self.router if self.is_available else None
    
    @property
    def is_ready(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ RabbitMQ –∫ —Ä–∞–±–æ—Ç–µ"""
        return self.is_available and self.is_connected
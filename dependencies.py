from fastapi import Depends, HTTPException, Request, Header
from typing import Optional
from auth import TelegramAuth
from config import BOT_TOKEN, DEV_MODE
import logging

logger = logging.getLogger(__name__)
telegram_auth = TelegramAuth(BOT_TOKEN)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º DatabaseManager –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
from database import DatabaseManager
from config import DATABASE_URL

# –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
auth_db_manager = DatabaseManager(DATABASE_URL)

async def get_current_user(
    request: Request,
    authorization: Optional[str] = Header(None),
    x_telegram_init_data: Optional[str] = Header(None)
) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram initData –∏ —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞—Ö–æ–¥–µ"""
    init_data = None
    
    if authorization and authorization.startswith("Bearer "):
        init_data = authorization.replace("Bearer ", "", 1)
    elif x_telegram_init_data:
        init_data = x_telegram_init_data

    if not init_data:
        init_data = request.query_params.get("initData")
    
    if not init_data:
        raise HTTPException(
            status_code=401,
            detail="Telegram initData required. Pass it in: Authorization header (Bearer <initData>), X-Telegram-InitData header, or initData query param"
        )
    
    try:
        user_data = telegram_auth.validate_init_data(init_data)
        user_id = user_data.get('id') or user_data.get('user', {}).get('id')
        username = user_data.get('username') or user_data.get('user', {}).get('username')
        
        # –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ü–†–ò –ü–ï–†–í–û–ú –ó–ê–•–û–î–ï
        try:
            existing_user = await auth_db_manager.get_user(user_id)
            if not existing_user:
                logger.info(f"üë§ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ID = {user_id}, username = {username}")
                await auth_db_manager.add_user(user_id, username)
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º username –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
                if username and existing_user.username != username:
                    await auth_db_manager.add_user(user_id, username)  # add_user –æ–±–Ω–æ–≤–ª—è–µ—Ç username
        except Exception as db_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {db_error}")
            # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –ë–î
        
        logger.info(f"üîê User authenticated: ID = {user_id}")   
        return user_data
    except Exception as e:
        raise HTTPException(status_code=401, detail=f"Invalid Telegram auth: {str(e)}")

def get_current_user_id(user_data=Depends(get_current_user)):
  return user_data['id']

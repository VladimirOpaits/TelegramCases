#!/usr/bin/env python3
"""
–¢–µ—Å—Ç TonKeeper –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –í–∞–ª–∏–¥–∞—Ü–∏—é TON –∞–¥—Ä–µ—Å–æ–≤
- –°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–æ–≤
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—é deep links
- –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–æ–∫ –ø–æ –≤—ã–≤–æ–¥–∞–º
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from ton_keeper_manager import tonkeeper_manager
from database.withdrawals import WithdrawalManager
from database.manager import DatabaseManager


async def test_tonkeeper_basic():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ TonKeeper"""
    print("üß™ –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ TonKeeper...")
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞
    test_address = "EQD4FPq-PRDieyQKkizFTRtSDyucUIqrj0v_zXJmqaDp6_0t"
    is_valid = tonkeeper_manager.validate_ton_address(test_address)
    print(f"üìç –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ {test_address}: {'‚úÖ' if is_valid else '‚ùå'}")
    
    # –¢–µ—Å—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
    invalid_address = "EQinvalid"
    is_invalid = tonkeeper_manager.validate_ton_address(invalid_address)
    print(f"üìç –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ {invalid_address}: {'‚ùå' if not is_invalid else '‚ö†Ô∏è'}")
    
    # –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏
    network_info = tonkeeper_manager.get_ton_network_info()
    print(f"üåê –°–µ—Ç—å: {network_info['network']}")
    print(f"üîó Explorer: {network_info['explorer']}")
    
    # –¢–µ—Å—Ç –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏
    fee = tonkeeper_manager.estimate_transaction_fee()
    print(f"üí∞ –û—Ü–µ–Ω–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏: {fee} TON")
    
    print("‚úÖ –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω\n")


async def test_qr_code_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–æ–≤"""
    print("üß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–æ–≤...")
    
    test_address = "EQD4FPq-PRDieyQKkizFTRtSDyucUIqrj0v_zXJmqaDp6_0t"
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞
    result = tonkeeper_manager.create_withdrawal_qr(
        amount_ton=0.5,
        destination_address=test_address,
        withdrawal_id=123,
        comment="Test withdrawal"
    )
    
    if result["success"]:
        print("‚úÖ QR-–∫–æ–¥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"üîó Deep link: {result['deep_link']}")
        print(f"üìÅ –§–∞–π–ª QR: {result['qr_code']['filepath']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        instructions = result['instructions']
        print(f"üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {len(instructions)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è TonKeeper
        tonkeeper_data = result['tonkeeper_data']
        print(f"üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è TonKeeper: {tonkeeper_data}")
        
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR: {result['error']}")
    
    print("‚úÖ –¢–µ—Å—Ç QR-–∫–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω\n")


async def test_withdrawal_summary():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–æ–∫ –ø–æ –≤—ã–≤–æ–¥–∞–º"""
    print("üß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–æ–∫ –ø–æ –≤—ã–≤–æ–¥–∞–º...")
    
    test_address = "EQD4FPq-PRDieyQKkizFTRtSDyucUIqrj0v_zXJmqaDp6_0t"
    
    # –¢–µ—Å—Ç —Å–≤–æ–¥–∫–∏
    summary = tonkeeper_manager.create_withdrawal_summary(
        withdrawal_id=123,
        amount_ton=0.5,
        destination_address=test_address,
        fee_ton=0.01
    )
    
    print(f"üìã –°–≤–æ–¥–∫–∞ –ø–æ –≤—ã–≤–æ–¥—É:\n{summary}")
    print("‚úÖ –¢–µ—Å—Ç —Å–≤–æ–¥–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω\n")


async def test_database_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db_manager = DatabaseManager()
        await db_manager.initialize_database()
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≤—ã–≤–æ–¥–æ–≤
        withdrawal_manager = WithdrawalManager(db_manager)
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        test_address = "EQD4FPq-PRDieyQKkizFTRtSDyucUIqrj0v_zXJmqaDp6_0t"
        is_valid = withdrawal_manager.tonkeeper.validate_ton_address(test_address)
        print(f"üìç –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä: {'‚úÖ' if is_valid else '‚ùå'}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏
        network_info = await withdrawal_manager.get_ton_network_info()
        print(f"üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏: {network_info}")
        
        # –¢–µ—Å—Ç –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏
        fee = withdrawal_manager.estimate_ton_fee()
        print(f"üí∞ –ö–æ–º–∏—Å—Å–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä: {fee} TON")
        
        print("‚úÖ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω\n")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–î: {e}")
        print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ TonKeeper –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    await test_tonkeeper_basic()
    await test_qr_code_creation()
    await test_withdrawal_summary()
    await test_database_integration()
    
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")


if __name__ == "__main__":
    asyncio.run(main()) 
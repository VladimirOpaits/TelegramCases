import logging
import base64
from fastapi import FastAPI, HTTPException, Depends, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from database import DatabaseManager
from Cases import CaseManager
from rabbit_manager import RabbitManager
from config import DATABASE_URL, CORS_ORIGINS, API_HOST, API_PORT, RABBITMQ_URL, DEV_MODE, TON_WALLET_ADDRESS
from pydantic import BaseModel
import uvicorn
import os
import json
from contextlib import asynccontextmanager
from dependencies import get_current_user, get_current_user_id
from pytonconnect import TonConnect
from ton_wallet_manager import TonWalletManager, TonWalletRequest, TonWalletResponse
from typing import Optional, List

logging.basicConfig(
  level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    force=True  
)
print("üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤ DEBUG —Ä–µ–∂–∏–º–µ")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RabbitMQ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
rabbit_manager = RabbitManager()
use_rabbitmq = rabbit_manager.initialize()


@asynccontextmanager
async def lifespan(app: FastAPI):
  print("üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞...")
  try:
    await db_manager.init_db()
    await case_manager.initialize()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    if use_rabbitmq:
      await rabbit_manager.connect()

    if rabbit_manager.is_ready:
      print("üê∞ RabbitMQ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
      print("‚ö° –ü—Ä—è–º—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã")

  except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

  yield

  if rabbit_manager.is_ready:
    await rabbit_manager.disconnect()
  await db_manager.close()
  print("üîå API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


app = FastAPI(title="Telegram Casino API", version="1.0.0", lifespan=lifespan)

app.add_middleware(
  CORSMiddleware,
  allow_origins=["*"],  # –í—Ä–µ–º–µ–Ω–Ω–æ
  allow_credentials=True,
  allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
  allow_headers=["*"],
  expose_headers=["*"]
)

db_manager = DatabaseManager(DATABASE_URL)
case_manager = CaseManager(db_manager)
ton_wallet_manager = TonWalletManager(db_manager)


class FanticsTransaction(BaseModel):
  user_id: int
  amount: int

class TopUpTonRequest(BaseModel):
  amount: int  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è

class TopUpStarsRequest(BaseModel):
  amount: int  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è

class TopUpRequest(BaseModel):
  amount: int  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
  payment_method: str  # "ton" –∏–ª–∏ "telegram_stars"

class TopUpPayload(BaseModel):
  amount: float  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ TON –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
  destination: str  # –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
  payload: str  # –¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  comment: str  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏


@app.get("/")
async def root():
  return {
    "message": "Telegram Casino API",
    "status": "running",
    "dev_mode": DEV_MODE,
    "database": "PostgreSQL" if "postgresql" in DATABASE_URL else "SQLite",
    "rabbitmq": {
      "available": rabbit_manager.is_available,
      "connected": rabbit_manager.is_connected,
      "ready": rabbit_manager.is_ready
    },
    "environment": "production" if not DEV_MODE else "development",
    "cors_origins": CORS_ORIGINS,
    "payment_methods": ["ton", "telegram_stars"]
  }


@app.options("/{path:path}")
async def options_handler(path: str):
  return {"message": "CORS preflight OK"}


@app.get("/cases")
async def get_cases():
  """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–µ–π—Å—ã"""
  try:
    cases = await case_manager.repository.get_all_cases()

    cases_list = [{
      "id": case.id,
      "name": case.name,
      "cost": case.cost,
      "presents": [{"cost": p.cost, "probability": prob}
                   for p, prob in case.presents_with_probabilities],
      "created_at": case.created_at.isoformat() if case.created_at else None,
      "updated_at": case.updated_at.isoformat() if case.updated_at else None
    } for case in cases.values()]

    return cases_list
  except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ–π—Å–æ–≤: {e}")
    raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ–π—Å–æ–≤: {str(e)}")


@app.get("/case/{case_id}")
async def get_case(case_id: int):
  """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–µ–π—Å–µ"""
  try:
    case = await case_manager.repository.get_case(case_id=case_id)
    if not case:
      raise HTTPException(status_code=404, detail="–ù–µ –Ω–∞—à–ª–∏ –∫–µ–π—Å, –ª–æ–ª")
    return {
      "id": case.id,
      "name": case.name,
      "cost": case.cost,
      "presents": [{"cost": p.cost, "probability": prob}
                   for p, prob in case.presents_with_probabilities],
      "created_at": case.created_at.isoformat() if case.created_at else None,
      "updated_at": case.updated_at.isoformat() if case.updated_at else None
    }
  except ValueError as e:
    raise HTTPException(status_code=404, detail=str(e))


@app.post("/open_case/{case_id}")
async def open_case(case_id: int, user_id: int = Depends(get_current_user_id)):
  """–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å (—Ç—Ä–µ–±—É–µ—Ç –æ–ø–ª–∞—Ç—ã —Ñ–∞–Ω—Ç–∏–∫–∞–º–∏) - –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ê–¢–û–ú–ê–†–ù–ê–Ø –í–ï–†–°–ò–Ø"""
  try:
    case = await case_manager.repository.get_case(case_id)
    if not case:
      raise HTTPException(status_code=404, detail="–ù–µ–º–∞ —Ç–∞–∫–æ–≥–æ –∫–µ–π—Å–∏–∫–∞")
    
    case_cost = case.cost
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã–∏–≥—Ä—ã—à –î–û –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    gift = case.get_random_present()
    prize_amount = gift.cost

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ê–¢–û–ú–ê–†–ù–£–Æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    success, message, new_balance = await db_manager.atomic_case_transaction(
        user_id=user_id,
        case_cost=case_cost,
        prize_amount=prize_amount
    )

    if not success:
      raise HTTPException(status_code=400, detail=message)

    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è RabbitMQ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–æ –ù–ï –∏–∑–º–µ–Ω—è–µ–º –±–∞–ª–∞–Ω—Å)
    if rabbit_manager.is_ready:
      await rabbit_manager.send_case_notification(user_id, case_id, case_cost, prize_amount)

    print(f"üé∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –∫–µ–π—Å {case_id}: –ø–æ—Ç—Ä–∞—Ç–∏–ª {case_cost}, –≤—ã–∏–≥—Ä–∞–ª {prize_amount}, –±–∞–ª–∞–Ω—Å: {new_balance}")

    return {
      "gift": prize_amount,
      "case_id": case_id,
      "spent": case_cost,
      "profit": prize_amount - case_cost,
      "new_balance": new_balance,
      "message": message
    }
  except ValueError as e:
    raise HTTPException(status_code=404, detail=str(e))
  except HTTPException:
    raise
  except Exception as e:
    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞: {e}")
    raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


@app.post("/fantics/add")
async def add_fantics(
  transaction: FanticsTransaction,
  current_user_id: int = Depends(get_current_user_id)
):
  """–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–Ω—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–±—è) - –ê–¢–û–ú–ê–†–ù–ê–Ø –í–ï–†–°–ò–Ø"""
  if transaction.user_id != current_user_id:
    raise HTTPException(
      status_code=403,
      detail="–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∞–Ω—Ç–∏–∫–∏ —Ç–æ–ª—å–∫–æ —Å–µ–±–µ"
    )

  if transaction.amount <= 0:
    raise HTTPException(
      status_code=400,
      detail="–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π"
    )

  if transaction.amount > 100000:  # –õ–∏–º–∏—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    raise HTTPException(
      status_code=400,
      detail="–°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
    )

  if rabbit_manager.is_ready:
    await rabbit_manager.send_fantics_transaction(
      user_id=transaction.user_id,
      amount=transaction.amount,
      action="add",
      reason="manual_deposit",
      initiator=current_user_id
    )
    message = f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ {transaction.amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å"
    print(f"üê∞ {message}")
    
    return {
      "status": "ok",
      "message": message,
      "user_id": transaction.user_id,
      "amount": transaction.amount
    }
  else:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç–æ–º–∞—Ä–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    success, message, new_balance = await db_manager.atomic_add_fantics(transaction.user_id, transaction.amount)
    
    if not success:
      raise HTTPException(status_code=400, detail=message)
    
    print(f"‚ö° {message}")
    return {
      "status": "ok",
      "message": message,
      "user_id": transaction.user_id,
      "amount": transaction.amount,
      "new_balance": new_balance
    }


@app.get("/fantics/{user_id}")
async def get_user_fantics(
  user_id: int,
  current_user_id: int = Depends(get_current_user_id)
):
  """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ñ–∞–Ω—Ç–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —Å–≤–æ–π)"""
  if user_id != current_user_id:
    raise HTTPException(
      status_code=403,
      detail="–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å"
    )

  fantics = await db_manager.get_fantics(user_id)
  if fantics is None:
    raise HTTPException(
      status_code=404,
      detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"
    )

  print(f"–£ {user_id} {fantics} –µ–±–∞–Ω–Ω—ã—Ö —Ñ–∞–Ω—Ç–∏–∫–æ–≤")
  return {"user_id": user_id, "fantics": fantics}

@app.middleware("http")           # –§–∏–≥–Ω—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
async def log_requests(request: Request, call_next):
    if request.url.path == "/ton/connect" and request.method == "POST":
        body = await request.body()
        try:
            body_json = json.loads(body.decode())
            print("=== –í–•–û–î–Ø–©–ò–ô –ó–ê–ü–†–û–° ===")
            print(f"Headers: {dict(request.headers)}")
            print(f"Body: {json.dumps(body_json, indent=2)}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ body: {e}")
            print(f"Raw body: {body}")
        
        async def receive():
            return {"type": "http.request", "body": body}
        request._receive = receive
    
    response = await call_next(request)
    return response

@app.get("/ton/wallets", response_model=List[TonWalletResponse])
async def get_user_ton_wallets(current_user_id: int = Depends(get_current_user_id)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö TON –∫–æ—à–µ–ª—å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        return await ton_wallet_manager.get_user_wallets(current_user_id, current_user_id)
    except HTTPException as e:
        print(f"HTTPException: {e.status_code} - {e.detail}")
        raise
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/ton/connect", response_model=TonWalletResponse)
async def connect_ton_wallet(
    wallet_data: TonWalletRequest,  
    current_user_id: int = Depends(get_current_user_id)
):
    print("=== –û–ë–†–ê–ë–û–¢–ö–ê TON CONNECT ===")
    print(f"Parsed wallet_data: {wallet_data}")
    print(f"Current user ID: {current_user_id}")
    
    try:
        result = await ton_wallet_manager.connect_wallet(wallet_data, current_user_id)
        print(f"–£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        return result
    except HTTPException as e:
        print(f"HTTPException: {e.status_code} - {e.detail}")
        raise
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/topup/stars")
async def topup_with_stars(
    request: TopUpStarsRequest,
    current_user_id: int = Depends(get_current_user_id)
):
    """–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        if request.amount <= 0:
            raise HTTPException(status_code=400, detail="–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        
        if request.amount > 1000000:  # –õ–∏–º–∏—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
            raise HTTPException(status_code=400, detail="–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ —á–µ—Ä–µ–∑ RabbitMQ
        if rabbit_manager.is_ready:
            success = await rabbit_manager.send_stars_payment_request(current_user_id, request.amount)
            
            if success:
                return {
                    "success": True,
                    "message": f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {request.amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ —á–µ—Ä–µ–∑ Telegram Stars –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                    "amount": request.amount,
                    "payment_method": "telegram_stars",
                    "status": "pending"
                }
            else:
                raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏")
        else:
            raise HTTPException(status_code=503, detail="–°–µ—Ä–≤–∏—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–≤–µ–∑–¥–æ—á–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ –∑–≤–µ–∑–¥–æ—á–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@app.post("/topup/ton/create_payload")
async def create_ton_topup_payload(
    request: TopUpTonRequest,
    current_user_id: int = Depends(get_current_user_id)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ payload –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ TON"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        if request.amount <= 0:
            raise HTTPException(status_code=400, detail="–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        
        if request.amount > 1000000:  # –õ–∏–º–∏—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
            raise HTTPException(status_code=400, detail="–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–Ω—Ç–∏–∫–∏ –≤ TON (1 TON = 1000 —Ñ–∞–Ω—Ç–∏–∫–æ–≤)
        ton_amount = request.amount / 1000.0
        
        # –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π (–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        destination_wallet = TON_WALLET_ADDRESS
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (TON –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –¥–ª–∏–Ω—É)
        comment = f"Fantics {request.amount} ID:{current_user_id}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (TON —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –¥–æ 127 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(comment) > 127:
            comment = f"Fantics {request.amount}"
        
        return TopUpPayload(
            amount=ton_amount,
            destination=destination_wallet,
            payload=comment,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π payload
            comment=comment
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ TON payload: {e}")
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")

@app.post("/topup/ton/confirm")
async def confirm_ton_topup(
    request: TopUpTonRequest,
    current_user_id: int = Depends(get_current_user_id)
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    try:
        # –í–ù–ò–ú–ê–ù–ò–ï: –ó–¥–µ—Å—å –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ!
        # –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç–æ–º–∞—Ä–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–Ω—Ç–∏–∫–æ–≤
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        if request.amount <= 0:
            raise HTTPException(status_code=400, detail="–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        
        if request.amount > 1000000:  # –õ–∏–º–∏—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
            raise HTTPException(status_code=400, detail="–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è")
        
        success, message, new_balance = await db_manager.atomic_add_fantics(current_user_id, request.amount)
        
        if success:
            print(f"‚úÖ TON –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user_id} –ø–æ–ª—É—á–∏–ª {request.amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤, –±–∞–ª–∞–Ω—Å: {new_balance}")
            return {
                "success": True, 
                "message": message,
                "new_balance": new_balance,
                "added_amount": request.amount,
                "payment_method": "ton"
            }
        else:
            raise HTTPException(status_code=400, detail=message)
            
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ TON –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

# –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
@app.post("/topup/create_payload")
async def create_topup_payload(
    request: TopUpRequest,
    current_user_id: int = Depends(get_current_user_id)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ payload –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ (—Å—Ç–∞—Ä—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª TON –∫–∞–∫ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
        if request.payment_method != "ton":
            raise HTTPException(status_code=400, detail="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /topup/stars –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏")
        
        # –ü–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ–º –Ω–∞ –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        ton_request = TopUpTonRequest(amount=request.amount)
        return await create_ton_topup_payload(ton_request, current_user_id)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ä–æ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ: {e}")
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")

@app.post("/topup/confirm")
async def confirm_topup(
    request: TopUpRequest,
    current_user_id: int = Depends(get_current_user_id)
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ (—Å—Ç–∞—Ä—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    try:
        # –ü–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ–º –Ω–∞ –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è TON
        ton_request = TopUpTonRequest(amount=request.amount)
        return await confirm_ton_topup(ton_request, current_user_id)
            
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ä–æ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")



# –ü–æ–¥–∫–ª—é—á–∞–µ–º RabbitMQ —Ä–æ—É—Ç–µ—Ä, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
rabbit_router = rabbit_manager.get_router()
if rabbit_router:
  @rabbit_router.subscriber("transactions")
  async def handle_transaction(message: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ñ–∞–Ω—Ç–∏–∫–æ–≤"""
    try:
      user_id = message["user_id"]
      amount = message["amount"]
      action = message["action"]
      reason = message.get("reason", "unknown")

      print(f"üê∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {action} {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—Ä–∏—á–∏–Ω–∞: {reason}")

      if action == "add":
        success = await db_manager.add_fantics(user_id, amount)
        if success:
          print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
          print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
      elif action == "spend":
        success = await db_manager.subtract_fantics(user_id, amount)
        if success:
          print(f"‚úÖ –°–ø–∏—Å–∞–Ω–æ {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
          print(f"‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
      print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")

  @rabbit_router.subscriber("telegram_payments")
  async def handle_telegram_payment(message: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º (–∑–≤–µ–∑–¥–æ—á–∫–∏)"""
    try:
      user_id = message["user_id"]
      amount = message["amount"]
      action = message["action"]
      payment_method = message.get("payment_method", "unknown")
      
      print(f"üåü –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: {action} –Ω–∞ {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —á–µ—Ä–µ–∑ {payment_method}")
      
      if action == "request_stars_payment":
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–æ–º –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å—É–º–º–∞: {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
        
    except Exception as e:
      print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º: {e}")

  app.include_router(rabbit_router)

if __name__ == "__main__":
  print(f"üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://{API_HOST}:{API_PORT}")
  print(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'Neon PostgreSQL' if 'neon' in DATABASE_URL else 'PostgreSQL' if 'postgresql' in DATABASE_URL else 'SQLite'}")
  print(f"üê∞ RabbitMQ: {'–í–∫–ª—é—á–µ–Ω' if rabbit_manager.is_available else '–û—Ç–∫–ª—é—á–µ–Ω'}")
  uvicorn.run("main:app", host=API_HOST, port=API_PORT)


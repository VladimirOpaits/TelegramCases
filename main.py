from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from database import DatabaseManager
from Cases import get_random_gift, get_case_info, get_all_cases_info, CaseRepository
from config import DATABASE_URL, CORS_ORIGINS, API_HOST, API_PORT, RABBITMQ_URL, DEV_MODE
from pydantic import BaseModel
import uvicorn
import os
from contextlib import asynccontextmanager

try:
  from faststream.rabbit.fastapi import RabbitRouter
  RABBITMQ_AVAILABLE = True
except ImportError:
  RABBITMQ_AVAILABLE = False
  print("‚ö†Ô∏è FastStream –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, RabbitMQ –æ—Ç–∫–ª—é—á–µ–Ω")

use_rabbitmq = False
router = None
broker = None

if RABBITMQ_AVAILABLE and RABBITMQ_URL and not DEV_MODE:
  print("üê∞ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ:", RABBITMQ_URL.split('@')[1] if '@' in RABBITMQ_URL else RABBITMQ_URL)
  try:
      router = RabbitRouter(RABBITMQ_URL)
      use_rabbitmq = True
      print("‚úÖ RabbitMQ –ø–æ–¥–∫–ª—é—á–µ–Ω")
  except Exception as e:
      print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ: {e}")
      use_rabbitmq = False
else:
  print("üìù RabbitMQ –æ—Ç–∫–ª—é—á–µ–Ω (—Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")

@asynccontextmanager
async def lifespan(app: FastAPI):
    print("üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞...")
    print(f"üîí CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {CORS_ORIGINS}")
    try:
        await db_manager.init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        if use_rabbitmq and router:
            await router.broker.connect()
            print("üê∞ RabbitMQ –±—Ä–æ–∫–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        if DEV_MODE:
            await db_manager.add_user(123456, "demo_user")
            await db_manager.set_fantics(123456, 50000)
            print("üéÆ –î–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å 50000 —Ñ–∞–Ω—Ç–∏–∫–æ–≤")
            
        print(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –∫–µ–π—Å–æ–≤: {len(CaseRepository.get_all_cases())}")
        
        if use_rabbitmq:
            print("üê∞ RabbitMQ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            print("‚ö° –ü—Ä—è–º—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")  
      
    yield 
  
    if use_rabbitmq and router:
        await router.broker.close()
        print("üê∞ RabbitMQ –±—Ä–æ–∫–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω")
    await db_manager.close()
    print("üîå API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


app = FastAPI(title="Telegram Casino API", version="1.0.0", lifespan=lifespan)


app.add_middleware(
  CORSMiddleware,
  allow_origins=["*"],  # –í—Ä–µ–º–µ–Ω–Ω–æ
  allow_credentials=True,
  allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
  allow_headers=["*"],
  expose_headers=["*"]
)

try:
  app.mount("/static", StaticFiles(directory="static"), name="static")
  print("üìÅ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
except Exception as e:
  print(f"‚ö†Ô∏è –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}")

db_manager = DatabaseManager(DATABASE_URL)

class FanticsTransaction(BaseModel):
  user_id: int
  amount: int


@app.get("/")
async def root():
  return {
      "message": "Telegram Casino API", 
      "status": "running",
      "dev_mode": DEV_MODE,
      "database": "PostgreSQL" if "postgresql" in DATABASE_URL else "SQLite",
      "rabbitmq": use_rabbitmq,
      "environment": "production" if not DEV_MODE else "development",
      "cors_origins": CORS_ORIGINS
  }

@app.get("/health")
async def health_check():
  try:
      count = await db_manager.get_users_count()
      return {
          "status": "healthy", 
          "database": "connected", 
          "users_count": count,
          "cases_count": len(CaseRepository.get_all_cases()),
          "dev_mode": DEV_MODE,
          "rabbitmq": use_rabbitmq,
          "cors_test": "OK"
      }
  except Exception as e:
      return {"status": "error", "database": "disconnected", "error": str(e)}

@app.options("/{path:path}")
async def options_handler(path: str):
  return {"message": "CORS preflight OK"}


@app.get("/cases")
async def get_cases():
  """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–µ–π—Å—ã"""
  try:
      cases = get_all_cases_info()
      print(f"üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(cases)} –∫–µ–π—Å–æ–≤")
      return cases
  except Exception as e:
      print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ–π—Å–æ–≤: {e}")
      raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ–π—Å–æ–≤: {str(e)}")

@app.get("/case/{case_id}")
async def get_case(case_id: int):
  """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–µ–π—Å–µ"""
  try:
      case_info = get_case_info(case_id)
      return case_info
  except ValueError as e:
      raise HTTPException(status_code=404, detail=str(e))



@app.post("/open_case/{case_id}")
async def open_case(case_id: int, user_id: int):
    """–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å (—Ç—Ä–µ–±—É–µ—Ç –æ–ø–ª–∞—Ç—ã —Ñ–∞–Ω—Ç–∏–∫–∞–º–∏)"""
    try:
        case_info = get_case_info(case_id)
        case_cost = case_info["cost"]

        current_balance = await db_manager.get_fantics(user_id)
        if current_balance is None:
            await db_manager.add_user(user_id)
            current_balance = 0

        if current_balance < case_cost:
            raise HTTPException(
                status_code=400,
                detail=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–Ω—Ç–∏–∫–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è: {case_cost}, –¥–æ—Å—Ç—É–ø–Ω–æ: {current_balance}"
            )

        gift = get_random_gift(case_id)

        await db_manager.subtract_fantics(user_id, case_cost)
        await db_manager.add_fantics(user_id, gift.cost)

        if use_rabbitmq and router:
            await router.broker.publish(
                {
                    "user_id": user_id,
                    "amount": case_cost,
                    "action": "spend",
                    "reason": f"open_case_{case_id}"
                },
                queue="transactions",
            )
            
            await router.broker.publish(
                {
                    "user_id": user_id,
                    "amount": gift.cost,
                    "action": "add",
                    "reason": f"case_win_{case_id}"
                },
                queue="transactions",
            )
            print(f"üê∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ RabbitMQ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        print(f"üé∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –∫–µ–π—Å {case_id}: –ø–æ—Ç—Ä–∞—Ç–∏–ª {case_cost}, –≤—ã–∏–≥—Ä–∞–ª {gift.cost}")

        return {
            "gift": gift.cost,
            "case_id": case_id,
            "spent": case_cost,
            "profit": gift.cost - case_cost
        }
    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")



@app.post("/fantics/add")
async def add_fantics(transaction: FanticsTransaction):
  """–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–Ω—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
  if transaction.amount <= 0:
      raise HTTPException(status_code=400, detail="–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

  user_id = transaction.user_id
  
  user = await db_manager.get_user(user_id)
  if not user:
      await db_manager.add_user(user_id)

  if use_rabbitmq and router:
      await router.broker.publish(
          {
              "user_id": user_id,
              "amount": transaction.amount,
              "action": "add",
              "reason": "manual_deposit"
          },
          queue="transactions",
      )
      message = f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ {transaction.amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å"
      print(f"üê∞ {message}")
  else:
      success = await db_manager.add_fantics(user_id, transaction.amount)
      message = f"–î–æ–±–∞–≤–ª–µ–Ω–æ {transaction.amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤" if success else "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–Ω—Ç–∏–∫–æ–≤"
      print(f"‚ö° {message}")
  
  return {
      "status": "ok",
      "message": message
  }

@app.get("/fantics/{user_id}")
async def get_user_fantics(user_id: int):
  """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
  fantics = await db_manager.get_fantics(user_id)
  if fantics is None:
      await db_manager.add_user(user_id)
      fantics = 0
  
  print(f"üíé –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {fantics}")
  return {"user_id": user_id, "fantics": fantics}

if use_rabbitmq and router:
  @router.subscriber("transactions")
  async def handle_transaction(message: dict):
      """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ñ–∞–Ω—Ç–∏–∫–æ–≤"""
      try:
          user_id = message["user_id"]
          amount = message["amount"]
          action = message["action"]
          reason = message.get("reason", "unknown")

          print(f"üê∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {action} {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—Ä–∏—á–∏–Ω–∞: {reason}")

          if action == "add":
              success = await db_manager.add_fantics(user_id, amount)
              if success:
                  print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
              else:
                  print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
          elif action == "spend":
              success = await db_manager.subtract_fantics(user_id, amount)
              if success:
                  print(f"‚úÖ –°–ø–∏—Å–∞–Ω–æ {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
              else:
                  print(f"‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

      except Exception as e:
          print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")

  app.include_router(router)

if __name__ == "__main__":
  print(f"üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://{API_HOST}:{API_PORT}")
  print(f"üîß –†–µ–∂–∏–º: {'–ü—Ä–æ–¥–∞–∫—à–Ω' if not DEV_MODE else '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞'}")
  print(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'Neon PostgreSQL' if 'neon' in DATABASE_URL else 'PostgreSQL' if 'postgresql' in DATABASE_URL else 'SQLite'}")
  print(f"üê∞ RabbitMQ: {'–í–∫–ª—é—á–µ–Ω' if use_rabbitmq else '–û—Ç–∫–ª—é—á–µ–Ω'}")
 
  if not DEV_MODE:
      uvicorn.run("main:app", host=API_HOST, port=API_PORT)
  else:
      uvicorn.run(app, host=API_HOST, port=API_PORT, reload=True)

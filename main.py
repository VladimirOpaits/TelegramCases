import logging
import json
import uvicorn

from fastapi import FastAPI, HTTPException, Depends, Request
from fastapi.middleware.cors import CORSMiddleware
from typing import Optional, List
from contextlib import asynccontextmanager

from database import DatabaseFacade
from database import CaseManager
from rabbit_manager import RabbitManager
import config
from dependencies import get_current_user, get_current_user_id
from payment_manager import PaymentManager, TonWalletRequest, TonWalletResponse, FanticsTransaction, TopUpTonRequest, TopUpStarsRequest
from withdrawal_manager import WithdrawalManager, WithdrawalRequestModel


logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s', force=True)
for logger in ["uvicorn.access", "uvicorn.error", "fastapi", "sqlalchemy", "aio_pika", "aiormq"]:
    logging.getLogger(logger).setLevel(logging.WARNING)


db_manager = DatabaseFacade(config.DATABASE_URL)
case_manager = db_manager.case_manager
rabbit_manager = RabbitManager(db_manager)
use_rabbitmq = rabbit_manager.initialize()
payment_manager = PaymentManager(db_manager, rabbit_manager)
withdrawal_manager = WithdrawalManager(db_manager)


@asynccontextmanager
async def lifespan(app: FastAPI):
    print("üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        await db_manager.init_db()
        await case_manager.initialize()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        if use_rabbitmq:
            await rabbit_manager.connect()

        if rabbit_manager.is_ready:
            print("üê∞ RabbitMQ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            await rabbit_manager.setup_handlers_and_include_router(app)
        else:
            print("‚ö° –ü—Ä—è–º—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã")
        
        print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        raise  

    yield
    print("üîå –û—Å—Ç–∞–Ω–æ–≤–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        if rabbit_manager.is_ready:
            await rabbit_manager.disconnect()
        await db_manager.close()
        print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")


app = FastAPI(title="Telegram Casino API", version="1.0.0", lifespan=lifespan)

app.add_middleware(
  CORSMiddleware,
  allow_origins=["*"],  # –í—Ä–µ–º–µ–Ω–Ω–æ
  allow_credentials=True,
  allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
  allow_headers=["*"],
  expose_headers=["*"]
)



@app.get("/cases")
async def get_cases():
  """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–µ–π—Å—ã"""
  cases = await case_manager.repository.get_all_cases()

  cases_list = [{
    "id": case.id,
    "name": case.name,
    "cost": case.cost,
    "presents": [{"cost": p.cost, "probability": prob}
                 for p, prob in case.presents_with_probabilities],
    "created_at": case.created_at.isoformat() if case.created_at else None,
    "updated_at": case.updated_at.isoformat() if case.updated_at else None
  } for case in cases.values()]

  return cases_list



@app.post("/open_case/{case_id}")
async def open_case(case_id: int, user_id: int = Depends(get_current_user_id)):
  """–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å (—Ç—Ä–µ–±—É–µ—Ç –æ–ø–ª–∞—Ç—ã —Ñ–∞–Ω—Ç–∏–∫–∞–º–∏) - –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ê–¢–û–ú–ê–†–ù–ê–Ø –í–ï–†–°–ò–Ø"""
  case = await case_manager.repository.get_case(case_id)
  if not case:
    raise HTTPException(status_code=404, detail="–ù–µ–º–∞ —Ç–∞–∫–æ–≥–æ –∫–µ–π—Å–∏–∫–∞")
  
  case_cost = case.cost
  gift = case.get_random_present()
  prize_amount = gift.cost

  success, message, new_balance = await db_manager.atomic_case_transaction(
      user_id=user_id,
      case_cost=case_cost,
      prize_amount=prize_amount
  )

  if not success:
    raise HTTPException(status_code=400, detail=message)

  print(f"üé∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –∫–µ–π—Å {case_id}: –ø–æ—Ç—Ä–∞—Ç–∏–ª {case_cost}, –≤—ã–∏–≥—Ä–∞–ª {prize_amount}, –±–∞–ª–∞–Ω—Å: {new_balance}")

  return {
    "gift": prize_amount,
    "case_id": case_id,
    "spent": case_cost,
    "profit": prize_amount - case_cost,
    "new_balance": new_balance,
    "message": message
  }


@app.post("/fantics/add")
async def add_fantics(
  transaction: FanticsTransaction,
  current_user_id: int = Depends(get_current_user_id)
):
  """–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–Ω—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–±—è)"""
  return await payment_manager.add_fantics_manual(transaction, current_user_id)


@app.get("/fantics/{user_id}")
async def get_user_fantics(
  user_id: int,
  current_user_id: int = Depends(get_current_user_id)
):
  """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ñ–∞–Ω—Ç–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —Å–≤–æ–π)"""
  if user_id != current_user_id:
    raise HTTPException(
      status_code=403,
      detail="–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å"
    )

  fantics = await db_manager.get_fantics(user_id)
  if fantics is None:
    raise HTTPException(
      status_code=404,
      detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"
    )

  print(f"–£ {user_id} {fantics} –µ–±–∞–Ω–Ω—ã—Ö —Ñ–∞–Ω—Ç–∏–∫–æ–≤")
  return {"user_id": user_id, "fantics": fantics}


@app.get("/ton/wallets", response_model=List[TonWalletResponse])
async def get_user_ton_wallets(current_user_id: int = Depends(get_current_user_id)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö TON –∫–æ—à–µ–ª—å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return await payment_manager.get_user_ton_wallets(current_user_id, current_user_id)

@app.post("/ton/connect", response_model=TonWalletResponse)
async def connect_ton_wallet(
    wallet_data: TonWalletRequest,  
    current_user_id: int = Depends(get_current_user_id)
):
    return await payment_manager.connect_ton_wallet(wallet_data, current_user_id)

@app.post("/topup/stars")
async def topup_with_stars(
    request: TopUpStarsRequest,
    current_user_id: int = Depends(get_current_user_id)
):
    """–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars"""
    return await payment_manager.create_stars_payment(request, current_user_id)

@app.post("/topup/ton/create_payload")
async def create_ton_topup_payload(
    request: TopUpTonRequest,
    current_user_id: int = Depends(get_current_user_id)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ payload –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ TON"""
    return await payment_manager.create_ton_payment_payload(request, current_user_id)

@app.post("/topup/ton/confirm")
async def confirm_ton_topup(
    request: dict,  # –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º payment_id, transaction_hash –∏ sender_wallet
    current_user_id: int = Depends(get_current_user_id)
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    payment_id = request.get("payment_id")
    transaction_hash = request.get("transaction_hash")
    sender_wallet = request.get("sender_wallet")  # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    
    if not payment_id:
        raise HTTPException(status_code=400, detail="–¢—Ä–µ–±—É–µ—Ç—Å—è payment_id")
    if not transaction_hash:
        raise HTTPException(status_code=400, detail="–¢—Ä–µ–±—É–µ—Ç—Å—è transaction_hash")
    
    return await payment_manager.confirm_ton_payment(
        payment_id=payment_id,
        transaction_hash=transaction_hash,
        user_id=current_user_id,
        sender_wallet=sender_wallet
    )

@app.get("/payment/status/{payment_id}")
async def get_payment_status(
    payment_id: str,
    current_user_id: int = Depends(get_current_user_id)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    payment = await db_manager.get_pending_payment(payment_id)
    if not payment:
        raise HTTPException(status_code=404, detail="–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if payment.user_id != current_user_id:
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    return {
        "payment_id": payment.payment_id,
        "status": payment.status,
        "amount_fantics": payment.amount_fantics,
        "amount_ton": payment.amount_ton,
        "created_at": payment.created_at.isoformat(),
        "expires_at": payment.expires_at.isoformat(),
        "confirmed_at": payment.confirmed_at.isoformat() if payment.confirmed_at else None,
        "transaction_hash": payment.transaction_hash
    }


# ========== –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –í–´–í–û–î–ê TON ==========

@app.post("/withdrawal/request")
async def create_withdrawal_request(
    request: WithdrawalRequestModel,
    current_user_id: int = Depends(get_current_user_id)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ TON"""
    return await withdrawal_manager.create_withdrawal_request(request)

@app.get("/withdrawal/info")
async def get_withdrawal_info(current_user_id: int = Depends(get_current_user_id)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–≤–æ–¥–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return await withdrawal_manager.get_withdrawal_info(current_user_id)

@app.get("/withdrawal/history")
async def get_withdrawal_history(current_user_id: int = Depends(get_current_user_id)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    withdrawals = await db_manager.get_user_withdrawal_requests(current_user_id, limit=50)
    return [
        {
            "id": w.id,
            "amount_fantics": w.amount_fantics,
            "amount_ton": w.amount_ton,
            "fee_amount": w.fee_amount,
            "destination_address": w.destination_address,
            "status": w.status,
            "transaction_hash": w.transaction_hash,
            "error_message": w.error_message,
            "created_at": w.created_at.isoformat(),
            "processed_at": w.processed_at.isoformat() if w.processed_at else None
        }
        for w in withdrawals
    ]

@app.post("/withdrawal/process")
async def process_withdrawals(current_user_id: int = Depends(get_current_user_id)):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–≤–æ–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if current_user_id not in config.ADMIN_IDS:
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    return await withdrawal_manager.process_pending_withdrawals()

@app.get("/withdrawal/statistics")
async def get_withdrawal_statistics(current_user_id: int = Depends(get_current_user_id)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–≤–æ–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if current_user_id not in config.ADMIN_IDS:
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    return await db_manager.get_withdrawal_statistics()


if __name__ == "__main__":
  print(f"üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://{config.API_HOST}:{config.API_PORT}")
  print(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'Neon PostgreSQL' if 'neon' in config.DATABASE_URL else 'PostgreSQL' if 'postgresql' in config.DATABASE_URL else 'SQLite'}")
  print(f"üê∞ RabbitMQ: {'–í–∫–ª—é—á–µ–Ω' if rabbit_manager.is_available else '–û—Ç–∫–ª—é—á–µ–Ω'}")
  uvicorn.run("main:app", host=config.API_HOST, port=config.API_PORT)


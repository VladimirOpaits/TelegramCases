import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from faststream.rabbit import RabbitBroker
from database import DatabaseManager
from config import BOT_TOKEN, DATABASE_URL, WEB_APP_URL

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
broker = RabbitBroker("amqp://guest:guest@localhost:5672/")
db_manager = DatabaseManager(DATABASE_URL)

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if message.from_user:
        user_id = message.from_user.id
        username = message.from_user.username
        
        success = await db_manager.add_user(user_id, username)
        if success:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üé∞ –û—Ç–∫—Ä—ã—Ç—å Casino App",
            web_app=WebAppInfo(url=f"{WEB_APP_URL}")
        )],
        [InlineKeyboardButton(
            text="üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ",
            web_app=WebAppInfo(url=f"{WEB_APP_URL}?page=terms")
        )]
    ])
    
    await message.answer(
        "üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Casino App!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å:",
        reply_markup=keyboard
    )

@broker.subscriber("transactions")
async def handle_transaction(data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏–∑ RabbitMQ: {data}")
        
        if isinstance(data, dict):
            user_id = data.get('user_id')
            amount = data.get('amount')
            action = data.get('action', 'add')
            
            if not user_id or amount is None:
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {data}")
                return
            
            if action == 'add':
                new_balance = await db_manager.add_fantics(user_id, amount)
                if new_balance is not None:
                    message_text = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤.\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}"
                else:
                    message_text = f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}"
            
            elif action == 'spend':
                new_balance = await db_manager.spend_fantics(user_id, amount)
                if new_balance is not None:
                    message_text = f"üí∏ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–ø–∏—Å–∞–Ω–æ {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤.\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}"
                else:
                    message_text = f"‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Ñ–∞–Ω—Ç–∏–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
            
            else:
                message_text = f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"
            
            await bot.send_message(
                chat_id=1943755838,
                text=message_text
            )
            
        else:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–µ—Ç—Å—è dict, –ø–æ–ª—É—á–µ–Ω–æ: {type(data)}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}", exc_info=True)

async def run_services():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    async with broker:
        logger.info("‚úÖ RabbitMQ –±—Ä–æ–∫–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω")
        
        await broker.start()
        
        await dp.start_polling(bot)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ Casino Bot")
    
    await db_manager.init_db()
    logger.info(f"Web App URL: {WEB_APP_URL}")
    
    try:
        await run_services()
    finally:
        await bot.session.close()
        await db_manager.close()
        logger.info("–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
import logging
import json
import uvicorn

from fastapi import FastAPI, HTTPException, Depends, Request
from fastapi.middleware.cors import CORSMiddleware
from typing import Optional, List
from contextlib import asynccontextmanager

from database import DatabaseManager
from Cases import CaseManager
from rabbit_manager import RabbitManager
from config import DATABASE_URL, API_HOST, API_PORT, CORS_ORIGINS, DEV_MODE
from dependencies import get_current_user, get_current_user_id
from payment_manager import PaymentManager, TonWalletRequest, TonWalletResponse, FanticsTransaction, TopUpTonRequest, TopUpStarsRequest, TopUpPayload, TopUpRequest


logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s', force=True)
for logger in ["uvicorn.access", "uvicorn.error", "fastapi", "sqlalchemy", "aio_pika", "aiormq"]:
    logging.getLogger(logger).setLevel(logging.WARNING)


db_manager = DatabaseManager(DATABASE_URL)
case_manager = CaseManager(db_manager)
rabbit_manager = RabbitManager(db_manager)
use_rabbitmq = rabbit_manager.initialize()
payment_manager = PaymentManager(db_manager, rabbit_manager)


@asynccontextmanager
async def lifespan(app: FastAPI):
    print("üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await db_manager.init_db()
        await case_manager.initialize()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RabbitMQ
        if use_rabbitmq:
            await rabbit_manager.connect()

        if rabbit_manager.is_ready:
            print("üê∞ RabbitMQ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            await rabbit_manager.setup_handlers_and_include_router(app)
        else:
            print("‚ö° –ü—Ä—è–º—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã")
        
        print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ

    yield
    print("üîå –û—Å—Ç–∞–Ω–æ–≤–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        if rabbit_manager.is_ready:
            await rabbit_manager.disconnect()
        await db_manager.close()
        print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")


app = FastAPI(title="Telegram Casino API", version="1.0.0", lifespan=lifespan)

app.add_middleware(
  CORSMiddleware,
  allow_origins=["*"],  # –í—Ä–µ–º–µ–Ω–Ω–æ
  allow_credentials=True,
  allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
  allow_headers=["*"],
  expose_headers=["*"]
)



@app.get("/cases")
async def get_cases():
  """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–µ–π—Å—ã"""
  cases = await case_manager.repository.get_all_cases()

  cases_list = [{
    "id": case.id,
    "name": case.name,
    "cost": case.cost,
    "presents": [{"cost": p.cost, "probability": prob}
                 for p, prob in case.presents_with_probabilities],
    "created_at": case.created_at.isoformat() if case.created_at else None,
    "updated_at": case.updated_at.isoformat() if case.updated_at else None
  } for case in cases.values()]

  return cases_list


@app.get("/case/{case_id}")
async def get_case(case_id: int):
  """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–µ–π—Å–µ"""
  case = await case_manager.repository.get_case(case_id=case_id)
  if not case:
    raise HTTPException(status_code=404, detail="–ù–µ –Ω–∞—à–ª–∏ –∫–µ–π—Å, –ª–æ–ª")
  return {
    "id": case.id,
    "name": case.name,
    "cost": case.cost,
    "presents": [{"cost": p.cost, "probability": prob}
                 for p, prob in case.presents_with_probabilities],
    "created_at": case.created_at.isoformat() if case.created_at else None,
    "updated_at": case.updated_at.isoformat() if case.updated_at else None
  }


@app.post("/open_case/{case_id}")
async def open_case(case_id: int, user_id: int = Depends(get_current_user_id)):
  """–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å (—Ç—Ä–µ–±—É–µ—Ç –æ–ø–ª–∞—Ç—ã —Ñ–∞–Ω—Ç–∏–∫–∞–º–∏) - –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ê–¢–û–ú–ê–†–ù–ê–Ø –í–ï–†–°–ò–Ø"""
  case = await case_manager.repository.get_case(case_id)
  if not case:
    raise HTTPException(status_code=404, detail="–ù–µ–º–∞ —Ç–∞–∫–æ–≥–æ –∫–µ–π—Å–∏–∫–∞")
  
  case_cost = case.cost
  gift = case.get_random_present()
  prize_amount = gift.cost

  success, message, new_balance = await db_manager.atomic_case_transaction(
      user_id=user_id,
      case_cost=case_cost,
      prize_amount=prize_amount
  )

  if not success:
    raise HTTPException(status_code=400, detail=message)

  print(f"üé∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –∫–µ–π—Å {case_id}: –ø–æ—Ç—Ä–∞—Ç–∏–ª {case_cost}, –≤—ã–∏–≥—Ä–∞–ª {prize_amount}, –±–∞–ª–∞–Ω—Å: {new_balance}")

  return {
    "gift": prize_amount,
    "case_id": case_id,
    "spent": case_cost,
    "profit": prize_amount - case_cost,
    "new_balance": new_balance,
    "message": message
  }


@app.post("/fantics/add")
async def add_fantics(
  transaction: FanticsTransaction,
  current_user_id: int = Depends(get_current_user_id)
):
  """–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–Ω—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–±—è)"""
  return await payment_manager.add_fantics_manual(transaction, current_user_id)


@app.get("/fantics/{user_id}")
async def get_user_fantics(
  user_id: int,
  current_user_id: int = Depends(get_current_user_id)
):
  """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ñ–∞–Ω—Ç–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —Å–≤–æ–π)"""
  if user_id != current_user_id:
    raise HTTPException(
      status_code=403,
      detail="–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å"
    )

  fantics = await db_manager.get_fantics(user_id)
  if fantics is None:
    raise HTTPException(
      status_code=404,
      detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ"
    )

  print(f"–£ {user_id} {fantics} –µ–±–∞–Ω–Ω—ã—Ö —Ñ–∞–Ω—Ç–∏–∫–æ–≤")
  return {"user_id": user_id, "fantics": fantics}

# –£–±—Ä–∞–ª–∏ middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –æ–Ω —Å–æ–∑–¥–∞–≤–∞–ª –ª–∏—à–Ω–∏–π —à—É–º

@app.get("/ton/wallets", response_model=List[TonWalletResponse])
async def get_user_ton_wallets(current_user_id: int = Depends(get_current_user_id)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö TON –∫–æ—à–µ–ª—å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return await payment_manager.get_user_ton_wallets(current_user_id, current_user_id)

@app.post("/ton/connect", response_model=TonWalletResponse)
async def connect_ton_wallet(
    wallet_data: TonWalletRequest,  
    current_user_id: int = Depends(get_current_user_id)
):
    return await payment_manager.connect_ton_wallet(wallet_data, current_user_id)

@app.post("/topup/stars")
async def topup_with_stars(
    request: TopUpStarsRequest,
    current_user_id: int = Depends(get_current_user_id)
):
    """–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars"""
    return await payment_manager.create_stars_payment(request, current_user_id)

@app.post("/topup/ton/create_payload")
async def create_ton_topup_payload(
    request: TopUpTonRequest,
    current_user_id: int = Depends(get_current_user_id)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ payload –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ TON"""
    return await payment_manager.create_ton_payment_payload(request, current_user_id)

@app.post("/topup/ton/confirm")
async def confirm_ton_topup(
    request: TopUpTonRequest,
    current_user_id: int = Depends(get_current_user_id)
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    return await payment_manager.confirm_ton_payment(request, current_user_id)

# –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
@app.post("/topup/create_payload")
async def create_topup_payload(
    request: TopUpRequest,
    current_user_id: int = Depends(get_current_user_id)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ payload –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ (—Å—Ç–∞—Ä—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª TON –∫–∞–∫ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
    if request.payment_method != "ton":
        raise HTTPException(status_code=400, detail="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /topup/stars –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏")
    
    # –ü–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ–º –Ω–∞ –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
    ton_request = TopUpTonRequest(amount=request.amount)
    return await create_ton_topup_payload(ton_request, current_user_id)

@app.post("/topup/confirm")
async def confirm_topup(
    request: TopUpRequest,
    current_user_id: int = Depends(get_current_user_id)
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ (—Å—Ç–∞—Ä—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    # –ü–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ–º –Ω–∞ –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è TON
    ton_request = TopUpTonRequest(amount=request.amount)
    return await confirm_ton_topup(ton_request, current_user_id)

if __name__ == "__main__":
  print(f"üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://{API_HOST}:{API_PORT}")
  print(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'Neon PostgreSQL' if 'neon' in DATABASE_URL else 'PostgreSQL' if 'postgresql' in DATABASE_URL else 'SQLite'}")
  print(f"üê∞ RabbitMQ: {'–í–∫–ª—é—á–µ–Ω' if rabbit_manager.is_available else '–û—Ç–∫–ª—é—á–µ–Ω'}")
  uvicorn.run("main:app", host=API_HOST, port=API_PORT)


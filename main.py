from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from database import DatabaseManager
from Cases import CaseManager
from config import DATABASE_URL, CORS_ORIGINS, API_HOST, API_PORT, RABBITMQ_URL, DEV_MODE
from pydantic import BaseModel
import uvicorn
import os
from contextlib import asynccontextmanager
from dependencies import get_current_user, get_current_user_id

try:
  from faststream.rabbit.fastapi import RabbitRouter

  RABBITMQ_AVAILABLE = True
except ImportError:
  RABBITMQ_AVAILABLE = False
  print("‚ö†Ô∏è FastStream –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, RabbitMQ –æ—Ç–∫–ª—é—á–µ–Ω")

use_rabbitmq = False
router = None
broker = None

if RABBITMQ_AVAILABLE and RABBITMQ_URL and not DEV_MODE:
  print("üê∞ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ:", RABBITMQ_URL.split('@')[1] if '@' in RABBITMQ_URL else RABBITMQ_URL)
  try:
    router = RabbitRouter(RABBITMQ_URL)
    use_rabbitmq = True
    print("‚úÖ RabbitMQ –ø–æ–¥–∫–ª—é—á–µ–Ω")
  except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ: {e}")
    use_rabbitmq = False
else:
  print("üìù RabbitMQ –æ—Ç–∫–ª—é—á–µ–Ω (—Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")


@asynccontextmanager
async def lifespan(app: FastAPI):
  print("üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞...")
  try:
    await db_manager.init_db()
    await case_manager.initialize()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    if use_rabbitmq and router:
      await router.broker.connect()
      print("üê∞ RabbitMQ –±—Ä–æ–∫–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω")

    if DEV_MODE:
      await db_manager.add_user(123456, "demo_user")
      await db_manager.set_fantics(123456, 50000)
      print("üéÆ –î–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å 50000 —Ñ–∞–Ω—Ç–∏–∫–æ–≤")

    if use_rabbitmq:
      print("üê∞ RabbitMQ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
      print("‚ö° –ü—Ä—è–º—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã")

  except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

  yield

  if use_rabbitmq and router:
    await router.broker.close()
    print("üê∞ RabbitMQ –±—Ä–æ–∫–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω")
  await db_manager.close()
  print("üîå API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


app = FastAPI(title="Telegram Casino API", version="1.0.0", lifespan=lifespan)

app.add_middleware(
  CORSMiddleware,
  allow_origins=["*"],  # –í—Ä–µ–º–µ–Ω–Ω–æ
  allow_credentials=True,
  allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
  allow_headers=["*"],
  expose_headers=["*"]
)

try:
  app.mount("/static", StaticFiles(directory="static"), name="static")
  print("üìÅ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
except Exception as e:
  print(f"‚ö†Ô∏è –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}")

db_manager = DatabaseManager(DATABASE_URL)
case_manager = CaseManager(db_manager)


class FanticsTransaction(BaseModel):
  user_id: int
  amount: int


@app.get("/")
async def root():
  return {
    "message": "Telegram Casino API",
    "status": "running",
    "dev_mode": DEV_MODE,
    "database": "PostgreSQL" if "postgresql" in DATABASE_URL else "SQLite",
    "rabbitmq": use_rabbitmq,
    "environment": "production" if not DEV_MODE else "development",
    "cors_origins": CORS_ORIGINS
  }


@app.options("/{path:path}")
async def options_handler(path: str):
  return {"message": "CORS preflight OK"}


@app.get("/cases")
async def get_cases():
  """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–µ–π—Å—ã"""
  try:
    cases = await case_manager.repository.get_all_cases()

    cases_list = [{
      "id": case.id,
      "name": case.name,
      "cost": case.cost,
      "presents": [{"cost": p.cost, "probability": prob}
                   for p, prob in case.presents_with_probabilities],
      "created_at": case.created_at.isoformat() if case.created_at else None,
      "updated_at": case.updated_at.isoformat() if case.updated_at else None
    } for case in cases.values()]

    return cases_list
  except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ–π—Å–æ–≤: {e}")
    raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ–π—Å–æ–≤: {str(e)}")


@app.get("/case/{case_id}")
async def get_case(case_id: int):
  """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–µ–π—Å–µ"""
  try:
    case = await case_manager.repository.get_case(case_id=case_id)
    if not case:
      raise HTTPException(status_code=404, detail="–ù–µ –Ω–∞—à–ª–∏ –∫–µ–π—Å, –ª–æ–ª")
    return {
      "id": case.id,
      "name": case.name,
      "cost": case.cost,
      "presents": [{"cost": p.cost, "probability": prob}
                   for p, prob in case.presents_with_probabilities],
      "created_at": case.created_at.isoformat() if case.created_at else None,
      "updated_at": case.updated_at.isoformat() if case.updated_at else None
    }
  except ValueError as e:
    raise HTTPException(status_code=404, detail=str(e))


@app.post("/open_case/{case_id}")
async def open_case(case_id: int, user_id: int = Depends(get_current_user_id)):
  """–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å (—Ç—Ä–µ–±—É–µ—Ç –æ–ø–ª–∞—Ç—ã —Ñ–∞–Ω—Ç–∏–∫–∞–º–∏)"""
  try:
    case = await case_manager.repository.get_case(case_id)
    if not case:
      raise HTTPException(status_code=404, detail="–ù–µ–º–∞ —Ç–∞–∫–æ–≥–æ –∫–µ–π—Å–∏–∫–∞")
    case_cost = case.cost

    current_balance = await db_manager.get_fantics(user_id) or 0

    if current_balance < case_cost:
      raise HTTPException(
        status_code=400,
        detail=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–Ω—Ç–∏–∫–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è: {case_cost}, –¥–æ—Å—Ç—É–ø–Ω–æ: {current_balance}"
      )

    gift = case.get_random_present()

    # --- –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ó–î–ï–°–¨ ---
    if use_rabbitmq and router:
      # –ï—Å–ª–∏ RabbitMQ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å
      await router.broker.publish(
        {
          "user_id": user_id,
          "amount": case_cost,
          "action": "spend",
          "reason": f"open_case_cost_{case_id}" # –ë–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞
        },
        queue="transactions",
      )

      await router.broker.publish(
        {
          "user_id": user_id,
          "amount": gift.cost,
          "action": "add",
          "reason": f"case_win_gift_{case_id}" # –ë–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞
        },
        queue="transactions",
      )
      print(f"üê∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ RabbitMQ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    else:
      # –ï—Å–ª–∏ RabbitMQ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é
      await db_manager.subtract_fantics(user_id, case_cost)
      await db_manager.add_fantics(user_id, gift.cost)
      print(f"‚ö° –ü—Ä—è–º—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    print(f"üé∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –∫–µ–π—Å {case_id}: –ø–æ—Ç—Ä–∞—Ç–∏–ª {case_cost}, –≤—ã–∏–≥—Ä–∞–ª {gift.cost}")

    return {
      "gift": gift.cost,
      "case_id": case_id,
      "spent": case_cost,
      "profit": gift.cost - case_cost
    }
  except ValueError as e:
    raise HTTPException(status_code=404, detail=str(e))
  except HTTPException:
    raise
  except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞: {e}")
    raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")


@app.post("/fantics/add")
async def add_fantics(
  transaction: FanticsTransaction,
  current_user_id: int = Depends(get_current_user_id)
):
  """–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–Ω—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–±—è)"""
  if transaction.user_id != current_user_id:
    raise HTTPException(
      status_code=403,
      detail="–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∞–Ω—Ç–∏–∫–∏ —Ç–æ–ª—å–∫–æ —Å–µ–±–µ"
    )

  if transaction.amount <= 0:
    raise HTTPException(
      status_code=400,
      detail="–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π"
    )

  user = await db_manager.get_user(transaction.user_id)
  if not user:
    await db_manager.add_user(transaction.user_id)

  if use_rabbitmq and router:
    await router.broker.publish(
      {
        "user_id": transaction.user_id,
        "amount": transaction.amount,
        "action": "add",
        "reason": "manual_deposit",
        "initiator": current_user_id
      },
      queue="transactions",
    )
    message = f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ {transaction.amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å"
    print(f"üê∞ {message}")
  else:
    success = await db_manager.add_fantics(transaction.user_id, transaction.amount)
    message = f"–î–æ–±–∞–≤–ª–µ–Ω–æ {transaction.amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤" if success else "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–Ω—Ç–∏–∫–æ–≤"
    print(f"‚ö° {message}")

  return {
    "status": "ok",
    "message": message,
    "user_id": transaction.user_id,
    "amount": transaction.amount
  }


@app.get("/fantics/{user_id}")
async def get_user_fantics(
  user_id: int,
  current_user_id: int = Depends(get_current_user_id)
):
  """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ñ–∞–Ω—Ç–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —Å–≤–æ–π)"""
  if user_id != current_user_id:
    raise HTTPException(
      status_code=403,
      detail="–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å"
    )

  fantics = await db_manager.get_fantics(user_id)
  if fantics is None:
    await db_manager.add_user(user_id)
    fantics = 0

  print(f"–£ {user_id} {fantics} –µ–±–∞–Ω–Ω—ã—Ö —Ñ–∞–Ω—Ç–∏–∫–æ–≤")
  return {"user_id": user_id, "fantics": fantics}


if use_rabbitmq and router:
  @router.subscriber("transactions")
  async def handle_transaction(message: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ñ–∞–Ω—Ç–∏–∫–æ–≤"""
    try:
      user_id = message["user_id"]
      amount = message["amount"]
      action = message["action"]
      reason = message.get("reason", "unknown")

      print(f"üê∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {action} {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—Ä–∏—á–∏–Ω–∞: {reason}")

      if action == "add":
        success = await db_manager.add_fantics(user_id, amount)
        if success:
          print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
          print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
      elif action == "spend":
        success = await db_manager.subtract_fantics(user_id, amount)
        if success:
          print(f"‚úÖ –°–ø–∏—Å–∞–Ω–æ {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
          print(f"‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
      print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")


  app.include_router(router)

if __name__ == "__main__":
  print(f"üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://{API_HOST}:{API_PORT}")
  print(f"üîß –†–µ–∂–∏–º: {'–ü—Ä–æ–¥–∞–∫—à–Ω' if not DEV_MODE else '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞'}")
  print(
    f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'Neon PostgreSQL' if 'neon' in DATABASE_URL else 'PostgreSQL' if 'postgresql' in DATABASE_URL else 'SQLite'}")
  print(f"üê∞ RabbitMQ: {'–í–∫–ª—é—á–µ–Ω' if use_rabbitmq else '–û—Ç–∫–ª—é—á–µ–Ω'}")

  if not DEV_MODE:
    uvicorn.run("main:app", host=API_HOST, port=API_PORT)
  else:
    uvicorn.run(app, host=API_HOST, port=API_PORT, reload=True)

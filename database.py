from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, relationship
from sqlalchemy import BigInteger, String, DateTime, select, func, Integer, CheckConstraint, Float, ForeignKey, UniqueConstraint
from datetime import datetime, timedelta
import os
from typing import Optional, List


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "users"

    id: Mapped[int] = mapped_column(primary_key=True, autoincrement=True)
    user_id: Mapped[int] = mapped_column(BigInteger, unique=True, nullable=False)
    username: Mapped[str] = mapped_column(String(255), nullable=True)
    registration_date: Mapped[datetime] = mapped_column(DateTime, default=datetime.now)
    fantics: Mapped[int] = mapped_column(Integer,
                                       nullable=False,
                                       default=0,
                                       server_default="0")

    __table_args__ = (
        CheckConstraint('fantics >= 0', name='check_fantics_positive'),
    )

    ton_wallets: Mapped[List["TonWallet"]] = relationship(
        back_populates="user", 
        cascade="all, delete-orphan"
    )

    def __repr__(self):
        return f"<User(id={self.id}, user_id={self.user_id}, username='{self.username}', fantics='{self.fantics}')>"


class TonWallet(Base):
    __tablename__ = "ton_wallets"
    
    id: Mapped[int] = mapped_column(primary_key=True, autoincrement=True)
    user_id: Mapped[int] = mapped_column(ForeignKey("users.user_id", ondelete="CASCADE"))
    wallet_address: Mapped[str] = mapped_column(String(67), nullable=False, unique=True)
    network: Mapped[Optional[str]] = mapped_column(String(10), nullable=True)  # -239, 0, etc.
    public_key: Mapped[Optional[str]] = mapped_column(String(64), nullable=True)  # Public key –≤ hex
    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.now)
    is_active: Mapped[bool] = mapped_column(default=True)
    
    user: Mapped["User"] = relationship(back_populates="ton_wallets")

    __table_args__ = (
        UniqueConstraint('user_id', 'wallet_address', name='_user_wallet_uc'),
    )

    def __repr__(self):
        return f"<TonWallet(id={self.id}, user_id={self.user_id}, address='{self.wallet_address}', network='{self.network}')>"


class Case(Base):
    __tablename__ = "cases"
    
    id: Mapped[int] = mapped_column(primary_key=True, autoincrement=True)
    name: Mapped[str] = mapped_column(String(255), nullable=False, unique=True)
    cost: Mapped[int] = mapped_column(Integer, nullable=False)
    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.now)
    updated_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.now, onupdate=datetime.now)
    
    case_presents: Mapped[List["CasePresent"]] = relationship(
        back_populates="case", 
        cascade="all, delete-orphan"
    )

    def __repr__(self):
        return f"<Case(id={self.id}, name='{self.name}', cost={self.cost})>"


class Present(Base):
    __tablename__ = "presents"
    
    id: Mapped[int] = mapped_column(primary_key=True, autoincrement=True)
    cost: Mapped[int] = mapped_column(Integer, nullable=False, unique=True)
    
    case_presents: Mapped[List["CasePresent"]] = relationship(back_populates="present")

    def __repr__(self):
        return f"<Present(id={self.id}, cost={self.cost})>"


class PendingPayment(Base):
    __tablename__ = "pending_payments"
    
    id: Mapped[int] = mapped_column(primary_key=True, autoincrement=True)
    payment_id: Mapped[str] = mapped_column(String(255), nullable=False, unique=True)
    user_id: Mapped[int] = mapped_column(Integer, nullable=False)
    amount_fantics: Mapped[int] = mapped_column(Integer, nullable=False)
    amount_ton: Mapped[float] = mapped_column(Float, nullable=False)
    payment_method: Mapped[str] = mapped_column(String(50), nullable=False)  # 'ton' –∏–ª–∏ 'stars'
    status: Mapped[str] = mapped_column(String(50), nullable=False, default='pending')  # pending, confirmed, failed, expired
    transaction_hash: Mapped[Optional[str]] = mapped_column(String(255), nullable=True)
    destination_address: Mapped[str] = mapped_column(String(255), nullable=False)
    comment: Mapped[str] = mapped_column(String(255), nullable=False)
    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.now)
    confirmed_at: Mapped[Optional[datetime]] = mapped_column(DateTime, nullable=True)
    expires_at: Mapped[datetime] = mapped_column(DateTime, nullable=False)
    
    def __repr__(self):
        return f"<PendingPayment(id={self.id}, payment_id='{self.payment_id}', user_id={self.user_id}, status='{self.status}')>"


class SuccessfulPayment(Base):
    __tablename__ = "successful_payments"
    
    id: Mapped[int] = mapped_column(primary_key=True, autoincrement=True)
    user_id: Mapped[int] = mapped_column(Integer, nullable=False)
    payment_method: Mapped[str] = mapped_column(String(50), nullable=False)  # 'ton' –∏–ª–∏ 'stars'
    amount_fantics: Mapped[int] = mapped_column(Integer, nullable=False)
    amount_paid: Mapped[float] = mapped_column(Float, nullable=False)  # —Å—É–º–º–∞ –≤ TON –∏–ª–∏ –∑–≤–µ–∑–¥–æ—á–∫–∞—Ö
    sender_wallet: Mapped[Optional[str]] = mapped_column(String(67), nullable=True)  # –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–¥–ª—è TON)
    transaction_hash: Mapped[Optional[str]] = mapped_column(String(255), nullable=True)  # —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–ª—è TON)
    payment_id: Mapped[Optional[str]] = mapped_column(String(255), nullable=True)  # ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ pending_payments
    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.now)
    
    def __repr__(self):
        return f"<SuccessfulPayment(id={self.id}, user_id={self.user_id}, method='{self.payment_method}', amount_fantics={self.amount_fantics}, amount_paid={self.amount_paid})>"


class CasePresent(Base):
    __tablename__ = "case_presents"
    
    id: Mapped[int] = mapped_column(primary_key=True, autoincrement=True)
    case_id: Mapped[int] = mapped_column(ForeignKey("cases.id", ondelete="CASCADE"))
    present_id: Mapped[int] = mapped_column(ForeignKey("presents.id"))
    probability: Mapped[float] = mapped_column(Float, nullable=False)
    
    case: Mapped["Case"] = relationship(back_populates="case_presents")
    present: Mapped["Present"] = relationship(back_populates="case_presents")
    
    __table_args__ = (
        UniqueConstraint('case_id', 'present_id', name='_case_present_uc'),
        CheckConstraint('probability > 0 AND probability <= 100', name='check_probability_range'),
    )

    def __repr__(self):
        return f"<CasePresent(case_id={self.case_id}, present_id={self.present_id}, probability={self.probability})>"





class DatabaseManager:
    def __init__(self, database_url: str):
        if "postgresql" in database_url:
            self.engine = create_async_engine(
                database_url, 
                echo=False, 
                pool_size=10,
                max_overflow=20,
                pool_pre_ping=True,
                pool_recycle=3600,
                # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
                logging_name=None
            )
        else:
            self.engine = create_async_engine(database_url, echo=True)
            
        self.async_session = async_sessionmaker(
            self.engine,
            class_=AsyncSession,
            expire_on_commit=False
        )

    async def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
        try:
            async with self.engine.begin() as conn:
                await conn.run_sync(Base.metadata.create_all)
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            raise

    async def clear_cache_and_reconnect(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await self.engine.dispose()
            print("üîÑ –ö—ç—à SQLAlchemy –æ—á–∏—â–µ–Ω")
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º engine
            if "postgresql" in self.engine.url:
                self.engine = create_async_engine(
                    self.engine.url, 
                    echo=False, 
                    pool_size=10,
                    max_overflow=20,
                    pool_pre_ping=True,
                    pool_recycle=3600,
                    # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
                    logging_name=None
                )
            else:
                self.engine = create_async_engine(self.engine.url, echo=True)
                
            self.async_session = async_sessionmaker(
                self.engine,
                class_=AsyncSession,
                expire_on_commit=False
            )
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")
            raise

    # ========== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ==========
    
    async def add_user(self, user_id: int, username: Optional[str] = None) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with self.async_session() as session:
                stmt = select(User).where(User.user_id == user_id)
                result = await session.execute(stmt)
                existing_user = result.scalar_one_or_none()

                if existing_user:
                    if username and existing_user.username != username:
                        existing_user.username = username
                        await session.commit()
                        print(f"üîÑ Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {username}")
                    return True

                new_user = User(
                    user_id=user_id,
                    username=username,
                    registration_date=datetime.now()
                )

                session.add(new_user)
                await session.commit()
                print(f"‚ûï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É")
                return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}")
            return False

    async def get_user(self, user_id: int) -> Optional[User]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with self.async_session() as session:
                stmt = select(User).where(User.user_id == user_id)
                result = await session.execute(stmt)
                return result.scalar_one_or_none()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î: {e}")
            return None

    async def get_all_users(self) -> list[User]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with self.async_session() as session:
                stmt = select(User)
                result = await session.execute(stmt)
                return list(result.scalars().all())
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î: {e}")
            return []

    async def update_user_username(self, user_id: int, new_username: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with self.async_session() as session:
                stmt = select(User).where(User.user_id == user_id)
                result = await session.execute(stmt)
                user = result.scalar_one_or_none()

                if user:
                    user.username = new_username
                    await session.commit()
                    print(f"üîÑ Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
                    return True
                else:
                    print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False

    async def delete_user(self, user_id: int) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with self.async_session() as session:
                stmt = select(User).where(User.user_id == user_id)
                result = await session.execute(stmt)
                user = result.scalar_one_or_none()

                if user:
                    await session.delete(user)
                    await session.commit()
                    print(f"üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã")
                    return True
                else:
                    print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False

    async def get_users_count(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            async with self.async_session() as session:
                stmt = select(func.count(User.id))
                result = await session.execute(stmt)
                return result.scalar() or 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return 0

    # ========== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –§–ê–ù–¢–ò–ö–ê–ú–ò ==========

    async def get_fantics(self, user_id: int) -> Optional[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with self.async_session() as session:
                stmt = select(User.fantics).where(User.user_id == user_id)
                result = await session.execute(stmt)
                fantics = result.scalar_one_or_none()
                return fantics if fantics is not None else 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–Ω—Ç–∏–∫–æ–≤: {e}")
            return None

    async def add_fantics(self, user_id: int, amount: int) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–Ω—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            async with self.async_session() as session:
                stmt = select(User).where(User.user_id == user_id)
                result = await session.execute(stmt)
                user = result.scalar_one_or_none()

                if user:
                    user.fantics += amount
                    await session.commit()
                    print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (–∏—Ç–æ–≥–æ: {user.fantics})")
                    return True
                else:
                    print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–Ω—Ç–∏–∫–æ–≤: {e}")
            return False

    async def subtract_fantics(self, user_id: int, amount: int) -> bool:
        """–°–ø–∏—Å–∞—Ç—å —Ñ–∞–Ω—Ç–∏–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with self.async_session() as session:
                stmt = select(User).where(User.user_id == user_id)
                result = await session.execute(stmt)
                user = result.scalar_one_or_none()

                if user and user.fantics >= amount:
                    user.fantics -= amount
                    await session.commit()
                    print(f"‚ûñ –°–ø–∏—Å–∞–Ω–æ {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–æ—Å—Ç–∞–ª–æ—Å—å: {user.fantics})")
                    return True
                else:
                    if user:
                        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–Ω—Ç–∏–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: –µ—Å—Ç—å {user.fantics}, –Ω—É–∂–Ω–æ {amount}")
                    else:
                        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Ñ–∞–Ω—Ç–∏–∫–æ–≤: {e}")
            return False

    async def set_fantics(self, user_id: int, amount: int) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            async with self.async_session() as session:
                stmt = select(User).where(User.user_id == user_id)
                result = await session.execute(stmt)
                user = result.scalar_one_or_none()

                if user:
                    user.fantics = max(0, amount)  # –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    await session.commit()
                    print(f"üîÑ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    return True
                else:
                    print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ñ–∞–Ω—Ç–∏–∫–æ–≤: {e}")
            return False

    # ========== –ê–¢–û–ú–ê–†–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò –î–õ–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ==========

    async def atomic_case_transaction(self, user_id: int, case_cost: int, prize_amount: int) -> tuple[bool, str, int]:
        """
        –ê—Ç–æ–º–∞—Ä–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞:
        1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å
        3. –°–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–µ–π—Å–∞
        4. –î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã–∏–≥—Ä—ã—à
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ–≤—ã–π_–±–∞–ª–∞–Ω—Å)
        """
        try:
            async with self.async_session() as session:
                # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                stmt = select(User).where(User.user_id == user_id).with_for_update()
                result = await session.execute(stmt)
                user = result.scalar_one_or_none()

                if not user:
                    return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ", 0

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
                if user.fantics < case_cost:
                    return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–Ω—Ç–∏–∫–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è: {case_cost}, –¥–æ—Å—Ç—É–ø–Ω–æ: {user.fantics}", user.fantics

                # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–æ–º–∞—Ä–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
                old_balance = user.fantics
                user.fantics = user.fantics - case_cost + prize_amount
                new_balance = user.fantics

                # –§–∏–∫—Å–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                await session.commit()
                
                print(f"üíé –ê—Ç–æ–º–∞—Ä–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∫–µ–π—Å–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –±–∞–ª–∞–Ω—Å {old_balance} -> {new_balance}")
                return True, f"–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç! –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {case_cost}, –≤—ã–∏–≥—Ä–∞–Ω–æ: {prize_amount}", new_balance

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Ç–æ–º–∞—Ä–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–µ–π—Å–∞: {e}")
            return False, f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}", 0

    async def atomic_subtract_fantics(self, user_id: int, amount: int) -> tuple[bool, str, int]:
        """
        –ê—Ç–æ–º–∞—Ä–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–Ω—Ç–∏–∫–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ–≤—ã–π_–±–∞–ª–∞–Ω—Å)
        """
        try:
            async with self.async_session() as session:
                # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                stmt = select(User).where(User.user_id == user_id).with_for_update()
                result = await session.execute(stmt)
                user = result.scalar_one_or_none()

                if not user:
                    return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", 0

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
                if user.fantics < amount:
                    return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–Ω—Ç–∏–∫–æ–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è: {amount}, –¥–æ—Å—Ç—É–ø–Ω–æ: {user.fantics}", user.fantics

                # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
                old_balance = user.fantics
                user.fantics -= amount
                new_balance = user.fantics

                await session.commit()
                
                print(f"‚ûñ –ê—Ç–æ–º–∞—Ä–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, {old_balance} -> {new_balance}")
                return True, f"–°–ø–∏—Å–∞–Ω–æ {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤", new_balance

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Ç–æ–º–∞—Ä–Ω–æ–º —Å–ø–∏—Å–∞–Ω–∏–∏: {e}")
            return False, f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}", 0

    async def atomic_add_fantics(self, user_id: int, amount: int) -> tuple[bool, str, int]:
        """
        –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–Ω—Ç–∏–∫–æ–≤
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ–≤—ã–π_–±–∞–ª–∞–Ω—Å)
        """
        try:
            async with self.async_session() as session:
                # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                stmt = select(User).where(User.user_id == user_id).with_for_update()
                result = await session.execute(stmt)
                user = result.scalar_one_or_none()

                if not user:
                    return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ", 0

                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
                old_balance = user.fantics
                user.fantics += amount
                new_balance = user.fantics

                await session.commit()
                
                print(f"‚ûï –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, {old_balance} -> {new_balance}")
                return True, f"–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤", new_balance

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Ç–æ–º–∞—Ä–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")
            return False, f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {str(e)}", 0
        
    # ========== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° TON –ö–û–®–ï–õ–¨–ö–ê–ú–ò ==========
    async def add_ton_wallet(self, user_id: int, wallet_address: str, network: Optional[str] = None, public_key: Optional[str] = None, retry_count: int = 0) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ TON –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        :param wallet_address: –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ —Å–µ—Ç–∏ TON
        :param network: –°–µ—Ç—å –∫–æ—à–µ–ª—å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "-239")
        :param public_key: –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∫–æ—à–µ–ª—å–∫–∞ –≤ hex —Ñ–æ—Ä–º–∞—Ç–µ
        :param retry_count: –°—á–µ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–∏)
        :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            async with self.async_session() as session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await self.get_user(user_id)
                if not user:
                    print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∫–æ—à–µ–ª–µ–∫
                stmt = select(TonWallet).where(
                    (TonWallet.wallet_address == wallet_address)
                )
                result = await session.execute(stmt)
                existing_wallet = result.scalar_one_or_none()
                
                if existing_wallet:
                    print(f"‚ö†Ô∏è –ö–æ—à–µ–ª–µ–∫ {wallet_address} —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {existing_wallet.user_id}")
                    return False
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫
                new_wallet = TonWallet(
                    user_id=user_id,
                    wallet_address=wallet_address,
                    network=network,
                    public_key=public_key
                )
                
                session.add(new_wallet)
                await session.commit()
                print(f"‚ûï –ö–æ—à–µ–ª–µ–∫ {wallet_address} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ TON –∫–æ—à–µ–ª—å–∫–∞: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π –∫—ç—à–∞ –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
            if ("InvalidCachedStatementError" in str(e) or "cached statement plan is invalid" in str(e)) and retry_count < 1:
                print("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∫—ç—à–∞ SQLAlchemy, –æ—á–∏—â–∞–µ–º –∫—ç—à...")
                try:
                    await self.clear_cache_and_reconnect()
                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
                    return await self.add_ton_wallet(user_id, wallet_address, network, public_key, retry_count + 1)
                except Exception as retry_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ: {retry_error}")
                    return False
            
            return False

    async def get_user_ton_wallets(self, user_id: int) -> List[TonWallet]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö TON –∫–æ—à–µ–ª—å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        :return: –°–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        """
        try:
            async with self.async_session() as session:
                stmt = select(TonWallet).where(
                    (TonWallet.user_id == user_id) &
                    (TonWallet.is_active == True)
                )
                result = await session.execute(stmt)
                return list(result.scalars().all())
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ TON –∫–æ—à–µ–ª—å–∫–æ–≤: {e}")
            return []

    async def get_ton_wallet_by_address(self, wallet_address: str, retry_count: int = 0) -> Optional[TonWallet]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É
        :param wallet_address: –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ —Å–µ—Ç–∏ TON
        :param retry_count: –°—á–µ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–∏)
        :return: –û–±—ä–µ–∫—Ç TonWallet –∏–ª–∏ None
        """
        try:
            async with self.async_session() as session:
                stmt = select(TonWallet).where(
                    (TonWallet.wallet_address == wallet_address)
                )
                result = await session.execute(stmt)
                return result.scalar_one_or_none()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ TON –∫–æ—à–µ–ª—å–∫–∞: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π –∫—ç—à–∞ –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
            if ("InvalidCachedStatementError" in str(e) or "cached statement plan is invalid" in str(e)) and retry_count < 1:
                print("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∫—ç—à–∞ SQLAlchemy, –æ—á–∏—â–∞–µ–º –∫—ç—à...")
                try:
                    await self.clear_cache_and_reconnect()
                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
                    return await self.get_ton_wallet_by_address(wallet_address, retry_count + 1)
                except Exception as retry_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ: {retry_error}")
                    return None
            
            return None

    async def deactivate_ton_wallet(self, wallet_address: str) -> bool:
        """
        –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è TON –∫–æ—à–µ–ª—å–∫–∞ (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
        :param wallet_address: –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ —Å–µ—Ç–∏ TON
        :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            async with self.async_session() as session:
                stmt = select(TonWallet).where(
                    (TonWallet.wallet_address == wallet_address)
                )
                result = await session.execute(stmt)
                wallet = result.scalar_one_or_none()
                
                if wallet:
                    wallet.is_active = False
                    await session.commit()
                    print(f"‚ûñ –ö–æ—à–µ–ª–µ–∫ {wallet_address} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    return True
                else:
                    print(f"‚ùå –ö–æ—à–µ–ª–µ–∫ {wallet_address} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ TON –∫–æ—à–µ–ª—å–∫–∞: {e}")
            return False

    async def reactivate_ton_wallet(self, wallet_address: str) -> bool:
        """
        –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è TON –∫–æ—à–µ–ª—å–∫–∞
        :param wallet_address: –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ —Å–µ—Ç–∏ TON
        :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            async with self.async_session() as session:
                stmt = select(TonWallet).where(
                    (TonWallet.wallet_address == wallet_address)
                )
                result = await session.execute(stmt)
                wallet = result.scalar_one_or_none()
                
                if wallet:
                    wallet.is_active = True
                    await session.commit()
                    print(f"üîÑ –ö–æ—à–µ–ª–µ–∫ {wallet_address} —Ä–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    return True
                else:
                    print(f"‚ùå –ö–æ—à–µ–ª–µ–∫ {wallet_address} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ TON –∫–æ—à–µ–ª—å–∫–∞: {e}")
            return False

    # ========== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° PENDING –ü–õ–ê–¢–ï–ñ–ê–ú–ò ==========
    
    async def create_pending_payment(
        self, 
        payment_id: str,
        user_id: int,
        amount_fantics: int,
        amount_ton: float,
        payment_method: str,
        destination_address: str,
        comment: str,
        expires_in_minutes: int = 30
    ) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ pending –ø–ª–∞—Ç–µ–∂–µ"""
        try:
            async with self.async_session() as session:
                expires_at = datetime.now() + timedelta(minutes=expires_in_minutes)
                
                payment = PendingPayment(
                    payment_id=payment_id,
                    user_id=user_id,
                    amount_fantics=amount_fantics,
                    amount_ton=amount_ton,
                    payment_method=payment_method,
                    status='pending',
                    destination_address=destination_address,
                    comment=comment,
                    expires_at=expires_at
                )
                
                session.add(payment)
                await session.commit()
                
                print(f"üí∞ –°–æ–∑–¥–∞–Ω pending –ø–ª–∞—Ç–µ–∂ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {amount_fantics} —Ñ–∞–Ω—Ç–∏–∫–æ–≤")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è pending –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False
    
    async def get_pending_payment(self, payment_id: str) -> Optional['PendingPayment']:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ pending –ø–ª–∞—Ç–µ–∂–∞ –ø–æ ID"""
        try:
            async with self.async_session() as session:
                stmt = select(PendingPayment).where(PendingPayment.payment_id == payment_id)
                result = await session.execute(stmt)
                return result.scalar_one_or_none()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pending –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return None
    
    async def update_payment_status(
        self, 
        payment_id: str, 
        status: str, 
        transaction_hash: Optional[str] = None
    ) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            async with self.async_session() as session:
                stmt = select(PendingPayment).where(PendingPayment.payment_id == payment_id)
                result = await session.execute(stmt)
                payment = result.scalar_one_or_none()
                
                if not payment:
                    print(f"‚ùå Pending –ø–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
                
                payment.status = status
                if transaction_hash:
                    payment.transaction_hash = transaction_hash
                if status == 'confirmed':
                    payment.confirmed_at = datetime.now()
                
                await session.commit()
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{status}'")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False
    
    async def get_pending_payments_for_verification(self, limit: int = 50) -> List['PendingPayment']:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ pending –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        try:
            async with self.async_session() as session:
                stmt = select(PendingPayment).where(
                    PendingPayment.status == 'pending',
                    PendingPayment.expires_at > datetime.now()
                ).limit(limit)
                result = await session.execute(stmt)
                return result.scalars().all()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pending –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            return []
    
    async def expire_old_payments(self) -> int:
        """–ü–æ–º–µ—á–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –∫–∞–∫ expired"""
        try:
            async with self.async_session() as session:
                stmt = select(PendingPayment).where(
                    PendingPayment.status == 'pending',
                    PendingPayment.expires_at <= datetime.now()
                )
                result = await session.execute(stmt)
                expired_payments = result.scalars().all()
                
                count = 0
                for payment in expired_payments:
                    payment.status = 'expired'
                    count += 1
                
                await session.commit()
                if count > 0:
                    print(f"‚è∞ –ü–æ–º–µ—á–µ–Ω–æ {count} –ø–ª–∞—Ç–µ–∂–µ–π –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–µ")
                return count
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            return 0

    # ========== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –£–°–ü–ï–®–ù–´–ú–ò –ü–õ–ê–¢–ï–ñ–ê–ú–ò ==========
    
    async def add_successful_payment(
        self,
        user_id: int,
        payment_method: str,
        amount_fantics: int,
        amount_paid: float,
        sender_wallet: Optional[str] = None,
        transaction_hash: Optional[str] = None,
        payment_id: Optional[str] = None
    ) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with self.async_session() as session:
                payment = SuccessfulPayment(
                    user_id=user_id,
                    payment_method=payment_method,
                    amount_fantics=amount_fantics,
                    amount_paid=amount_paid,
                    sender_wallet=sender_wallet,
                    transaction_hash=transaction_hash,
                    payment_id=payment_id
                )
                
                session.add(payment)
                await session.commit()
                
                print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∑–∞–ø–∏—Å–∞–Ω: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –º–µ—Ç–æ–¥ {payment_method}, {amount_fantics} —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –∑–∞ {amount_paid}")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False
    
    async def get_user_successful_payments(
        self, 
        user_id: int, 
        limit: int = 50
    ) -> List[SuccessfulPayment]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with self.async_session() as session:
                stmt = select(SuccessfulPayment).where(
                    SuccessfulPayment.user_id == user_id
                ).order_by(SuccessfulPayment.created_at.desc()).limit(limit)
                
                result = await session.execute(stmt)
                return result.scalars().all()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            return []
    
    async def get_all_successful_payments(
        self, 
        limit: int = 100
    ) -> List[SuccessfulPayment]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        try:
            async with self.async_session() as session:
                stmt = select(SuccessfulPayment).order_by(
                    SuccessfulPayment.created_at.desc()
                ).limit(limit)
                
                result = await session.execute(stmt)
                return result.scalars().all()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            return []
    
    async def get_payment_statistics(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
        try:
            async with self.async_session() as session:
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                total_payments = await session.scalar(
                    select(func.count(SuccessfulPayment.id))
                )
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç–æ–¥–∞–º –æ–ø–ª–∞—Ç—ã
                ton_payments = await session.scalar(
                    select(func.count(SuccessfulPayment.id)).where(
                        SuccessfulPayment.payment_method == 'ton'
                    )
                )
                
                stars_payments = await session.scalar(
                    select(func.count(SuccessfulPayment.id)).where(
                        SuccessfulPayment.payment_method == 'stars'
                    )
                )
                
                # –û–±—â–∞—è —Å—É–º–º–∞ —Ñ–∞–Ω—Ç–∏–∫–æ–≤
                total_fantics = await session.scalar(
                    select(func.sum(SuccessfulPayment.amount_fantics))
                ) or 0
                
                # –û–±—â–∞—è —Å—É–º–º–∞ –≤ TON
                total_ton = await session.scalar(
                    select(func.sum(SuccessfulPayment.amount_paid)).where(
                        SuccessfulPayment.payment_method == 'ton'
                    )
                ) or 0
                
                return {
                    "total_payments": total_payments,
                    "ton_payments": ton_payments,
                    "stars_payments": stars_payments,
                    "total_fantics": total_fantics,
                    "total_ton": total_ton
                }
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            return {
                "total_payments": 0,
                "ton_payments": 0,
                "stars_payments": 0,
                "total_fantics": 0,
                "total_ton": 0
            }

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        await self.engine.dispose()
        print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")



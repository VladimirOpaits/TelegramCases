"""
TonKeeper Integration Manager

–ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TonKeeper –¥–ª—è:
- –°–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ TON
- –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ deep links –¥–ª—è TonKeeper
- –í–∞–ª–∏–¥–∞—Ü–∏–∏ TON –∞–¥—Ä–µ—Å–æ–≤
"""

import qrcode
import json
from typing import Optional, Dict, Any
from datetime import datetime
import os


class TonKeeperManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å TonKeeper"""
    
    def __init__(self):
        self.network = "mainnet"  # –∏–ª–∏ testnet –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    def create_withdrawal_qr(
        self, 
        amount_ton: float, 
        destination_address: str, 
        withdrawal_id: int,
        comment: str = ""
    ) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ TON —á–µ—Ä–µ–∑ TonKeeper
        
        Args:
            amount_ton: –°—É–º–º–∞ –≤ TON
            destination_address: –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            withdrawal_id: ID –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥
            comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è QR-–∫–æ–¥–∞ –∏ deep link
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            full_comment = f"Withdrawal #{withdrawal_id}"
            if comment:
                full_comment += f": {comment}"
            
            # –°–æ–∑–¥–∞–µ–º deep link –¥–ª—è TonKeeper
            deep_link = self._create_tonkeeper_deep_link(
                amount_ton, 
                destination_address, 
                full_comment
            )
            
            # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
            qr_data = self._create_qr_code(deep_link)
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è TonKeeper
            tonkeeper_data = {
                "amount": amount_ton,
                "destination": destination_address,
                "comment": full_comment,
                "network": self.network,
                "withdrawal_id": withdrawal_id
            }
            
            return {
                "success": True,
                "qr_code": qr_data,
                "deep_link": deep_link,
                "tonkeeper_data": tonkeeper_data,
                "instructions": self._get_instructions(amount_ton, destination_address)
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞: {str(e)}"
            }
    
    def _create_tonkeeper_deep_link(
        self, 
        amount_ton: float, 
        destination_address: str, 
        comment: str
    ) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ deep link –¥–ª—è TonKeeper"""
        # –§–æ—Ä–º–∞—Ç: ton://transfer/{address}?amount={amount}&text={comment}
        deep_link = f"ton://transfer/{destination_address}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params = []
        if amount_ton > 0:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–∞–Ω–æ–¢–û–ù (1 TON = 1,000,000,000 –Ω–∞–Ω–æ–¢–û–ù)
            amount_nano = int(amount_ton * 1_000_000_000)
            params.append(f"amount={amount_nano}")
        
        if comment:
            params.append(f"text={comment}")
        
        if params:
            deep_link += "?" + "&".join(params)
        
        return deep_link
    
    def _create_qr_code(self, data: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=10,
                border=4,
            )
            qr.add_data(data)
            qr.make(fit=True)
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = qr.make_image(fill_color="black", back_color="white")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            filename = f"withdrawal_qr_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
            filepath = os.path.join("temp", filename)
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É temp –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs("temp", exist_ok=True)
            
            img.save(filepath)
            
            return {
                "filepath": filepath,
                "filename": filename,
                "data": data
            }
            
        except Exception as e:
            return {
                "filepath": None,
                "filename": None,
                "data": data,
                "error": str(e)
            }
    
    def _get_instructions(self, amount_ton: float, destination_address: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return f"""
üì± –î–ª—è –≤—ã–≤–æ–¥–∞ {amount_ton} TON –Ω–∞ –∞–¥—Ä–µ—Å {destination_address}:

1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ TonKeeper –Ω–∞ –≤–∞—à–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–µ
2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –∏–ª–∏ "Send"
3Ô∏è‚É£ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å
4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É–º–º—É –∏ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
5Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
6Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –±–ª–æ–∫—á–µ–π–Ω–µ

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ TON –Ω–µ–æ–±—Ä–∞—Ç–∏–º—ã!
üîó –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {destination_address}
üí∞ –°—É–º–º–∞: {amount_ton} TON
        """.strip()
    
    def validate_ton_address(self, address: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è TON –∞–¥—Ä–µ—Å–∞"""
        try:
            # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ TON –∞–¥—Ä–µ—Å–∞
            if not address.startswith('EQ') or len(address) != 48:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (base64)
            valid_chars = set('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-')
            return all(char in valid_chars for char in address)
            
        except Exception:
            return False
    
    def get_ton_network_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏ TON"""
        return {
            "network": self.network,
            "name": "The Open Network",
            "currency": "TON",
            "decimals": 9,
            "explorer": "https://tonscan.org" if self.network == "mainnet" else "https://testnet.tonscan.org",
            "faucet": None if self.network == "mainnet" else "https://t.me/testgiver_ton_bot"
        }
    
    def estimate_transaction_fee(self) -> float:
        """–û—Ü–µ–Ω–∫–∞ –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é TON"""
        # –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è TON (–æ–±—ã—á–Ω–æ 0.01-0.05 TON)
        return 0.01
    
    def create_withdrawal_summary(
        self, 
        withdrawal_id: int, 
        amount_ton: float, 
        destination_address: str,
        fee_ton: float = None
    ) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –≤—ã–≤–æ–¥—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if fee_ton is None:
            fee_ton = self.estimate_transaction_fee()
        
        total_cost = amount_ton + fee_ton
        
        summary = f"""
üí≥ –°–≤–æ–¥–∫–∞ –ø–æ –≤—ã–≤–æ–¥—É #{withdrawal_id}

üí∞ –°—É–º–º–∞ –∫ –≤—ã–≤–æ–¥—É: {amount_ton} TON
üí∏ –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ç–∏: {fee_ton} TON
üíµ –ò—Ç–æ–≥–æ —Å–ø–∏—Å–∞–Ω–æ: {total_cost} TON

üìç –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {destination_address}
üåê –°–µ—Ç—å: {self.network.upper()}

üì± –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ TonKeeper
‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 1-5 —Å–µ–∫—É–Ω–¥
        """.strip()
        
        return summary


# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
tonkeeper_manager = TonKeeperManager()


def test_tonkeeper_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å TonKeeper"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TonKeeper –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞
    test_address = "EQD4FPq-PRDieyQKkizFTRtSDyucUIqrj0v_zXJmqaDp6_0t"
    is_valid = tonkeeper_manager.validate_ton_address(test_address)
    print(f"üìç –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ {test_address}: {'‚úÖ' if is_valid else '‚ùå'}")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞
    result = tonkeeper_manager.create_withdrawal_qr(
        amount_ton=0.5,
        destination_address=test_address,
        withdrawal_id=123,
        comment="Test withdrawal"
    )
    
    if result["success"]:
        print("‚úÖ QR-–∫–æ–¥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"üîó Deep link: {result['deep_link']}")
        print(f"üìÅ –§–∞–π–ª QR: {result['qr_code']['filepath']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR: {result['error']}")
    
    # –¢–µ—Å—Ç —Å–≤–æ–¥–∫–∏
    summary = tonkeeper_manager.create_withdrawal_summary(123, 0.5, test_address)
    print(f"\nüìã –°–≤–æ–¥–∫–∞ –ø–æ –≤—ã–≤–æ–¥—É:\n{summary}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    test_tonkeeper_integration() 